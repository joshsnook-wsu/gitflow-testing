<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:schedulers="http://www.mulesoft.org/schema/mule/schedulers" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:context="http://www.springframework.org/schema/context" xmlns:ftps="http://www.mulesoft.org/schema/mule/ftps" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/schedulers http://www.mulesoft.org/schema/mule/schedulers/current/mule-schedulers.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ftps http://www.mulesoft.org/schema/mule/ftps/current/mule-ftps.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd">
    
   
    <flow name="wsu-esg-INTO-SFTP-flow" processingStrategy="synchronous" initialState="started">
        <ftps:read config-ref="FTPS__Server" filePath="${input.path}" fileName="*.xml" moveToDir="${input.path.archive}" pollingFrequency="420000" doc:name="FTPS Read File" pollingInitialDelay="10000" zeroSizeCheckMaxRetries="25" zeroSizeCheckWaitTime="10000" sizeCheckWaitTime="1500"/>
        <logger message="${mule.env} : INTO SFTP Flow STARTED.Received File from Server!" level="INFO" doc:name="Logger"/>
        <set-payload value="#[payload]" mimeType="application/xml" doc:name="Set Payload"/>
        <scatter-gather doc:name="Scatter-Gather">
            <processor-chain>
                <logger message="${mule.env} : Test Score Gathering" level="INFO" doc:name="Logger"/>
                <dw:transform-message  doc:name="XML to CSV Test Score Transform"  metadata:id="b9024da9-1a9c-4e46-85e6-15a45fe9c797">
                    <dw:input-payload/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/csv separator="," , ignoreEmptyLine=true, quoteValues=true
---
(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime ,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth ,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS ,
	CitizenshipType: studentApplication.CitizenshipType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[0].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[0].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[0].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[0].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[0].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].WritingSubscore
})) ++
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
		SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime ,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth ,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS ,
	CitizenshipType: studentApplication.CitizenshipType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[1].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[1].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[1].TestDate ,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[1].OfficialTestScore ,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[1].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[1]?) otherwise {}))
++
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
		SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime ,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth ,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS ,
	CitizenshipType: studentApplication.CitizenshipType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[2].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[2].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[2].TestDate ,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[2].OfficialTestScore ,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[2].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[2]?) otherwise {}))
++
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
		SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime ,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth ,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS ,
	CitizenshipType: studentApplication.CitizenshipType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[3].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[3].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[3].TestDate ,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[3].OfficialTestScore ,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[3].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[3]?) otherwise {}))
++
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
		SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime ,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth ,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS ,
	CitizenshipType: studentApplication.CitizenshipType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[1].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[4].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[4].TestDate ,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[4].OfficialTestScore ,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[4].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[4]?) otherwise {}))
++
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
		SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime ,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth ,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS ,
	CitizenshipType: studentApplication.CitizenshipType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[5].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[5].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[5].TestDate ,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[5].OfficialTestScore ,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[5].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[5]?) otherwise {}))
++
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
		SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime ,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth ,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS ,
	CitizenshipType: studentApplication.CitizenshipType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[6].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[6].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[6].TestDate ,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[6].OfficialTestScore ,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[6].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[6]?) otherwise {}))
++
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
		SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime ,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth ,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS ,
	CitizenshipType: studentApplication.CitizenshipType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[7].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[7].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[7].TestDate ,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[7].OfficialTestScore ,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[7].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[7]?) otherwise {}))
++
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
		SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime ,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth ,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS ,
	CitizenshipType: studentApplication.CitizenshipType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[8].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[8].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[8].TestDate ,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[8].OfficialTestScore ,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[8].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[8]?) otherwise {}))
++
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
		SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime ,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth ,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS ,
	CitizenshipType: studentApplication.CitizenshipType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[9].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[9].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[9].TestDate ,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[9].OfficialTestScore ,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[9].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[9]?) otherwise {}))
++
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
		SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime ,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth ,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS ,
	CitizenshipType: studentApplication.CitizenshipType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[10].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[10].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[10].TestDate ,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[10].OfficialTestScore ,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[10].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[10]?) otherwise {}))
++
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
		SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime ,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth ,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS ,
	CitizenshipType: studentApplication.CitizenshipType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[11].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[11].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[11].TestDate ,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[11].OfficialTestScore ,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[11].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[11]?) otherwise {}))]]></dw:set-payload>
                </dw:transform-message>
                <logger message="${mule.env} : Test Transformed" level="INFO" doc:name="Logger"/>
                <dw:transform-message  doc:name="Test Dup Transform"  metadata:id="e1b6b0db-1fff-4d54-a8e4-e9ce5d0aff31">
                    <dw:input-payload doc:sample="/Users/tnelson/Documents/INTO DE App Files/Direct Entry sample CSV.csv"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/csv separator="," , ignoreEmptyLine=true, quoteValues=true
---
payload map ((payload01 , indexOfPayload01) -> {
	SalesforceApplicationID: payload01.SalesforceApplicationID,
	INTOCenterName: payload01.INTOCenterName,
	ApplicationCreationDateTime: payload01.ApplicationCreationDateTime,
	FirstName: payload01.FirstName,
	LastName: payload01.LastName,
	MiddleName: payload01.MiddleName,
	Gender: payload01.Gender,
	DateOfBirth: payload01.DateOfBirth,
	CountryOfBirth: payload01.CountryOfBirth,
	CntryCodeOfBirth: payload01.CntryCodeOfBirth,
	CountryOfCitizenship: payload01.CountryOfCitizenship,
	CntryCodeOfCitznship: payload01.CntryCodeOfCitznship,
	CountryOfNationality: payload01.CountryOfNationality,
	CntryCodeOfNationality: payload01.CntryCodeOfNationality,
	CurrentlyLivingInUS: payload01.CurrentlyLivingInUS,
	CitizenshipType: payload01.CitizenshipType,
	StudentEmailAddress: payload01.StudentEmailAddress,
	PhoneNumber: payload01.PhoneNumber,
	Addr1-AddressType: payload01.Addr1-AddressType,
	Addr1-Address1: payload01.Addr1-Address1,
	Addr1-Address2: payload01.Addr1-Address2,
	Addr1-Address3: payload01.Addr1-Address3,
	Addr1-AddressCity: payload01.Addr1-AddressCity,
	Addr1-AddressState: payload01.Addr1-AddressState,
	Addr1-AddressZip: payload01.Addr1-AddressZip,
	Addr1-AddressCountry: payload01.Addr1-AddressCountry,
	Addr1-AddrCntryCode: payload01.Addr1-AddrCntryCode,
	Addr2-AddressType: payload01.Addr2-AddressType,
	Addr2-Address1: payload01.Addr2-Address1,
	Addr2-Address2: payload01.Addr2-Address2,
	Addr2-Address3: payload01.Addr2-Address3,
	Addr2-AddressCity: payload01.Addr2-AddressCity,
	Addr2-AddressState: payload01.Addr2-AddressState,
	Addr2-AddressZip: payload01.Addr2-AddressZip,
	Addr2-AddressCountry: payload01.Addr2-AddressCountry,
	Addr2-AddrCntryCode: payload01.Addr2-AddrCntryCode,
	Test1-TestName: payload01.Test1-TestName,
	Test1-TestNameOther: payload01.Test1-TestNameOther,
	Test1-TestDate: payload01.Test1-TestDate,
	Test1-OfficialTestScore: payload01.Test1-OfficialTestScore,
	Test1-OverallScore: payload01.Test1-OverallScore,
	Test1-ListeningSubscore: payload01.Test1-ListeningSubscore,
	Test1-ReadingSubscore: payload01.Test1-ReadingSubscore,
	Test1-SpeakingSubscore: payload01.Test1-SpeakingSubscore,
	Test1-WritingSubscore: payload01.Test1-WritingSubscore
} when payload01.Test1-TestName matches /(.*\w+.*)/ otherwise {})]]></dw:set-payload>
                </dw:transform-message>
                <logger message="${mule.env} : Only Tests with test scores" level="INFO" doc:name="Logger"/>
                <dw:transform-message  doc:name="Transform Message" metadata:id="9c4795d9-56ec-4dce-b7b4-37a27e5039ed">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/csv separator="," , ignoreEmptyLine=true, quoteValues=true, header=false
---
payload]]></dw:set-payload>
                </dw:transform-message>
                <logger message="${mule.env} : Test Score Processed" level="INFO" doc:name="Logger"/>
                <ftps:write config-ref="FTPS__Server" filePath="${output_test.path}" fileName="${output_test.pattern}" doc:name="FTPS Write INTOAPP File"/>
            </processor-chain>
            <processor-chain>
                <logger message="${mule.env} : Course File Processing" level="INFO" doc:name="Logger"/>
                <dw:transform-message doc:name="XML to CSV Course Transform" metadata:id="df9dca36-e537-4441-8553-4b86192343c2">
                    <dw:input-payload/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/csv separator = "," , ignoreEmptyLine = true
---
(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	PassportNumber: studentApplication.PassportNumber,
	PassportIssueDate: studentApplication.PassportIssueDate,
	PassportExpirationDate: studentApplication.PassportExpirationDate,
	PassportIssueCountry: studentApplication.PassportIssueCountry,
	PssprtIssueCntryCode: studentApplication.PassportIssueCountryCode,
	PassportPlaceOfBirth: studentApplication.PassportPlaceOfBirth,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	AcademicDisciplinaryIndicated: studentApplication.AcademicDisciplinaryIndicated,
	AcademicDisciplinaryDetails: studentApplication.AcademicDisciplinaryDetails,
	LegalDisciplinaryIndicated: studentApplication.LegalDisciplinaryIndicated,
	LegalDisciplinaryDetails: studentApplication.LegalDisciplinaryDetails,
	ApplicationStudentType: studentApplication.ApplicationStudentType,
	SourceOfApplication: studentApplication.SourceOfApplication,
	AgentName: studentApplication.AgentName,
	AgentUniqueIdentifier: studentApplication.AgentUniqueIdentifier,
	SponsorName: studentApplication.SponsorName,
	SponsorCode: studentApplication.SponsorCode,
	AccommodationFirstPreference: studentApplication.AccommodationFirstPreference,
	AccommodationSecondPreference: studentApplication.AccommodationSecondPreference,
	AccommodationThirdPreference: studentApplication.AccommodationThirdPreference,
	VisaType:studentApplication.VisaType,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Schl1-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolName,
	Schl1-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolType,
	Schl1-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCity,
	Schl1-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCountry,
	Schl1-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCountryCode,
	Schl1-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolStartDate,
	Schl1-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolEndDate,
	Schl1-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].GraduationDate,
	Schl1-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[0].AcademicQualificationName,
	Schl1-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[0].OverallGPA,
	Schl2-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolName,
	Schl2-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolType,
	Schl2-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCity,
	Schl2-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCountry,
	Schl2-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCountryCode,
	Schl2-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolStartDate,
	Schl2-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolEndDate,
	Schl2-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].GraduationDate,
	Schl2-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[1].AcademicQualificationName,
	Schl2-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[1].OverallGPA,
	Schl3-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolName,
	Schl3-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolType,
	Schl3-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCity,
	Schl3-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCountry,
	Schl3-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCountryCode,
	Schl3-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolStartDate,
	Schl3-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolEndDate,
	Schl3-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].GraduationDate,
	Schl3-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[2].AcademicQualificationName,
	Schl3-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[2].OverallGPA,
	Schl4-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolName,
	Schl4-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolType,
	Schl4-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCity,
	Schl4-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCountry,
	Schl4-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCountryCode,
	Schl4-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolStartDate,
	Schl4-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolEndDate,
	Schl4-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].GraduationDate,
	Schl4-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[3].AcademicQualificationName,
	Schl4-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[3].OverallGPA,
	Schl5-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolName,
	Schl5-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolType,
	Schl5-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCity,
	Schl5-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCountry,
	Schl5-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCountryCode,
	Schl5-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolStartDate,
	Schl5-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolEndDate,
	Schl5-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].GraduationDate,
	Schl5-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[4].AcademicQualificationName,
	Schl5-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[4].OverallGPA,
	Schl6-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolName,
	Schl6-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolType,
	Schl6-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCity,
	Schl6-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCountry,
	Schl6-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCountryCode,
	Schl6-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolStartDate,
	Schl6-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolEndDate,
	Schl6-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].GraduationDate,
	Schl6-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[5].AcademicQualificationName,
	Schl6-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[5].OverallGPA,
	Schl7-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolName,
	Schl7-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolType,
	Schl7-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCity,
	Schl7-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCountry,
	Schl7-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCountryCode,
	Schl7-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolStartDate,
	Schl7-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolEndDate,
	Schl7-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].GraduationDate,
	Schl7-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[6].AcademicQualificationName,
	Schl7-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[6].OverallGPA,
	Schl8-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolName,
	Schl8-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolType,
	Schl8-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCity,
	Schl8-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCountry,
	Schl8-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCountryCode,
	Schl8-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolStartDate,
	Schl8-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolEndDate,
	Schl8-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].GraduationDate,
	Schl8-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[7].AcademicQualificationName,
	Schl8-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[7].OverallGPA,
	Schl9-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolName,
	Schl9-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolType,
	Schl9-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCity,
	Schl9-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCountry,
	Schl9-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCountryCode,
	Schl9-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolStartDate,
	Schl9-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolEndDate,
	Schl9-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].GraduationDate,
	Schl9-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[8].AcademicQualificationName,
	Schl9-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[8].OverallGPA,
	Schl10-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolName,
	Schl10-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolType,
	Schl10-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCity,
	Schl10-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCountry,
	Schl10-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCountryCode,
	Schl10-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolStartDate,
	Schl10-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolEndDate,
	Schl10-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].GraduationDate,
	Schl10-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[9].AcademicQualificationName,
	Schl10-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[9].OverallGPA,
	Schl11-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolName,
	Schl11-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolType,
	Schl11-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCity,
	Schl11-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCountry,
	Schl11-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCountryCode,
	Schl11-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolStartDate,
	Schl11-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolEndDate,
	Schl11-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].GraduationDate,
	Schl11-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[10].AcademicQualificationName,
	Schl11-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[10].OverallGPA,
	Schl12-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolName,
	Schl12-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolType,
	Schl12-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCity,
	Schl12-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCountry,
	Schl12-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCountryCode,
	Schl12-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolStartDate,
	Schl12-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolEndDate,
	Schl12-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].GraduationDate,
	Schl12-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[11].AcademicQualificationName,
	Schl12-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[11].OverallGPA,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[0].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[0].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[0].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[0].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[0].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].WritingSubscore,
	Test2-TestName: studentApplication.StudentTestScores.*TestScoreNode[1].TestName,
	Test2-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[1].TestNameOther,
	Test2-TestDate: studentApplication.StudentTestScores.*TestScoreNode[1].TestDate,
	Test2-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[1].OfficialTestScore,
	Test2-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[1].OverallScore,
	Test2-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ListeningSubscore,
	Test2-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ReadingSubscore,
	Test2-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].SpeakingSubscore,
	Test2-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].WritingSubscore,
	Test3-TestName: studentApplication.StudentTestScores.*TestScoreNode[2].TestName,
	Test3-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[2].TestNameOther,
	Test3-TestDate: studentApplication.StudentTestScores.*TestScoreNode[2].TestDate,
	Test3-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[2].OfficialTestScore,
	Test3-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[2].OverallScore,
	Test3-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ListeningSubscore,
	Test3-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ReadingSubscore,
	Test3-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].SpeakingSubscore,
	Test3-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].WritingSubscore,
	Test4-TestName: studentApplication.StudentTestScores.*TestScoreNode[3].TestName,
	Test4-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[3].TestNameOther,
	Test4-TestDate: studentApplication.StudentTestScores.*TestScoreNode[3].TestDate,
	Test4-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[3].OfficialTestScore,
	Test4-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[3].OverallScore,
	Test4-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ListeningSubscore,
	Test4-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ReadingSubscore,
	Test4-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].SpeakingSubscore,
	Test4-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].WritingSubscore,
	Test5-TestName: studentApplication.StudentTestScores.*TestScoreNode[4].TestName,
	Test5-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[4].TestNameOther,
	Test5-TestDate: studentApplication.StudentTestScores.*TestScoreNode[4].TestDate,
	Test5-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[4].OfficialTestScore,
	Test5-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[4].OverallScore,
	Test5-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ListeningSubscore,
	Test5-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ReadingSubscore,
	Test5-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].SpeakingSubscore,
	Test5-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].WritingSubscore,
	Test6-TestName: studentApplication.StudentTestScores.*TestScoreNode[5].TestName,
	Test6-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[5].TestNameOther,
	Test6-TestDate: studentApplication.StudentTestScores.*TestScoreNode[5].TestDate,
	Test6-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[5].OfficialTestScore,
	Test6-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[5].OverallScore,
	Test6-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ListeningSubscore,
	Test6-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ReadingSubscore,
	Test6-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].SpeakingSubscore,
	Test6-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].WritingSubscore,
	Test7-TestName: studentApplication.StudentTestScores.*TestScoreNode[6].TestName,
	Test7-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[6].TestNameOther,
	Test7-TestDate: studentApplication.StudentTestScores.*TestScoreNode[6].TestDate,
	Test7-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[6].OfficialTestScore,
	Test7-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[6].OverallScore,
	Test7-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ListeningSubscore,
	Test7-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ReadingSubscore,
	Test7-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].SpeakingSubscore,
	Test7-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].WritingSubscore,
	Test8-TestName: studentApplication.StudentTestScores.*TestScoreNode[7].TestName,
	Test8-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[7].TestNameOther,
	Test8-TestDate: studentApplication.StudentTestScores.*TestScoreNode[7].TestDate,
	Test8-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[7].OfficialTestScore,
	Test8-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[7].OverallScore,
	Test8-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ListeningSubscore,
	Test8-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ReadingSubscore,
	Test8-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].SpeakingSubscore,
	Test8-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].WritingSubscore,
	Test9-TestName: studentApplication.StudentTestScores.*TestScoreNode[8].TestName,
	Test9-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[8].TestNameOther,
	Test9-TestDate: studentApplication.StudentTestScores.*TestScoreNode[8].TestDate,
	Test9-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[8].OfficialTestScore,
	Test9-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[8].OverallScore,
	Test9-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ListeningSubscore,
	Test9-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ReadingSubscore,
	Test9-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].SpeakingSubscore,
	Test9-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].WritingSubscore,
	Test10-TestName: studentApplication.StudentTestScores.*TestScoreNode[9].TestName,
	Test10-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[9].TestNameOther,
	Test10-TestDate: studentApplication.StudentTestScores.*TestScoreNode[9].TestDate,
	Test10-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[9].OfficialTestScore,
	Test10-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[9].OverallScore,
	Test10-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ListeningSubscore,
	Test10-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ReadingSubscore,
	Test10-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].SpeakingSubscore,
	Test10-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].WritingSubscore,
	Test11-TestName: studentApplication.StudentTestScores.*TestScoreNode[10].TestName,
	Test11-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[10].TestNameOther,
	Test11-TestDate: studentApplication.StudentTestScores.*TestScoreNode[10].TestDate,
	Test11-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[10].OfficialTestScore,
	Test11-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[10].OverallScore,
	Test11-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ListeningSubscore,
	Test11-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ReadingSubscore,
	Test11-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].SpeakingSubscore,
	Test11-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].WritingSubscore,
	Test12-TestName: studentApplication.StudentTestScores.*TestScoreNode[11].TestName,
	Test12-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[11].TestNameOther,
	Test12-TestDate: studentApplication.StudentTestScores.*TestScoreNode[11].TestDate,
	Test12-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[11].OfficialTestScore,
	Test12-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[11].OverallScore,
	Test12-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ListeningSubscore,
	Test12-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ReadingSubscore,
	Test12-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].SpeakingSubscore,
	Test12-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].WritingSubscore,
	Crse1-CourseId: studentApplication.CourseInformation.*CourseNode[0].CourseId,
	Crse1-ProgramName: studentApplication.CourseInformation.*CourseNode[0].ProgramName,
	Crse1-ProgramGroup: "Academic English Pre-Undergraduate" when studentApplication.CourseInformation.*CourseNode[1].ProgramGroup == 'Undergraduate Pathway' and studentApplication.CourseInformation.*CourseNode[0].ProgramGroup == 'Academic English' 
	otherwise "Academic English Pre-Graduate" 
	when studentApplication.CourseInformation.*CourseNode[1].ProgramGroup == "Graduate Pathway" and studentApplication.CourseInformation.*CourseNode[0].ProgramGroup == 'Academic English'
	otherwise studentApplication.CourseInformation.*CourseNode[0].ProgramGroup,
	Crse1-ProgramType: studentApplication.CourseInformation.*CourseNode[0].ProgramType,
	Crse1-UniversityMajorCode: studentApplication.CourseInformation.*CourseNode[0].UniversityMajorCode,
	Crse1-CourseStartDate: studentApplication.CourseInformation.*CourseNode[0].CourseStartDate,
	Crse1-CourseEndDate: studentApplication.CourseInformation.*CourseNode[0].CourseEndDate,
	Crse1-LatestDecision: studentApplication.CourseInformation.*CourseNode[0].LatestDecision,
	Crse1-LatestDecisionDateTime: studentApplication.CourseInformation.*CourseNode[0].LatestDecisionDateTime,
	Crse1-LatestResponse: studentApplication.CourseInformation.*CourseNode[0].LatestResponse,
	Crse1-LatestResponseDateTime: studentApplication.CourseInformation.*CourseNode[0].LatestResponseDateTime
}
	))  ++
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	PassportNumber: studentApplication.PassportNumber,
	PassportIssueDate: studentApplication.PassportIssueDate,
	PassportExpirationDate: studentApplication.PassportExpirationDate,
	PassportIssueCountry: studentApplication.PassportIssueCountry,
	PssprtIssueCntryCode: studentApplication.PassportIssueCountryCode,
	PassportPlaceOfBirth: studentApplication.PassportPlaceOfBirth,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	AcademicDisciplinaryIndicated: studentApplication.AcademicDisciplinaryIndicated,
	AcademicDisciplinaryDetails: studentApplication.AcademicDisciplinaryDetails,
	LegalDisciplinaryIndicated: studentApplication.LegalDisciplinaryIndicated,
	LegalDisciplinaryDetails: studentApplication.LegalDisciplinaryDetails,
	ApplicationStudentType: studentApplication.ApplicationStudentType,
	SourceOfApplication: studentApplication.SourceOfApplication,
	AgentName: studentApplication.AgentName,
	AgentUniqueIdentifier: studentApplication.AgentUniqueIdentifier,
	SponsorName: studentApplication.SponsorName,
	SponsorCode: studentApplication.SponsorCode,
	AccommodationFirstPreference: studentApplication.AccommodationFirstPreference,
	AccommodationSecondPreference: studentApplication.AccommodationSecondPreference,
	AccommodationThirdPreference: studentApplication.AccommodationThirdPreference,
	VisaType:studentApplication.VisaType,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Schl1-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolName,
	Schl1-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolType,
	Schl1-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCity,
	Schl1-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCountry,
	Schl1-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCountryCode,
	Schl1-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolStartDate,
	Schl1-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolEndDate,
	Schl1-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].GraduationDate,
	Schl1-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[0].AcademicQualificationName,
	Schl1-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[0].OverallGPA,
	Schl2-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolName,
	Schl2-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolType,
	Schl2-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCity,
	Schl2-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCountry,
	Schl2-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCountryCode,
	Schl2-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolStartDate,
	Schl2-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolEndDate,
	Schl2-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].GraduationDate,
	Schl2-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[1].AcademicQualificationName,
	Schl2-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[1].OverallGPA,
	Schl3-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolName,
	Schl3-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolType,
	Schl3-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCity,
	Schl3-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCountry,
	Schl3-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCountryCode,
	Schl3-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolStartDate,
	Schl3-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolEndDate,
	Schl3-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].GraduationDate,
	Schl3-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[2].AcademicQualificationName,
	Schl3-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[2].OverallGPA,
	Schl4-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolName,
	Schl4-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolType,
	Schl4-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCity,
	Schl4-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCountry,
	Schl4-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCountryCode,
	Schl4-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolStartDate,
	Schl4-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolEndDate,
	Schl4-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].GraduationDate,
	Schl4-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[3].AcademicQualificationName,
	Schl4-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[3].OverallGPA,
	Schl5-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolName,
	Schl5-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolType,
	Schl5-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCity,
	Schl5-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCountry,
	Schl5-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCountryCode,
	Schl5-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolStartDate,
	Schl5-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolEndDate,
	Schl5-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].GraduationDate,
	Schl5-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[4].AcademicQualificationName,
	Schl5-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[4].OverallGPA,
	Schl6-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolName,
	Schl6-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolType,
	Schl6-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCity,
	Schl6-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCountry,
	Schl6-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCountryCode,
	Schl6-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolStartDate,
	Schl6-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolEndDate,
	Schl6-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].GraduationDate,
	Schl6-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[5].AcademicQualificationName,
	Schl6-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[5].OverallGPA,
	Schl7-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolName,
	Schl7-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolType,
	Schl7-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCity,
	Schl7-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCountry,
	Schl7-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCountryCode,
	Schl7-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolStartDate,
	Schl7-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolEndDate,
	Schl7-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].GraduationDate,
	Schl7-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[6].AcademicQualificationName,
	Schl7-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[6].OverallGPA,
	Schl8-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolName,
	Schl8-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolType,
	Schl8-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCity,
	Schl8-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCountry,
	Schl8-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCountryCode,
	Schl8-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolStartDate,
	Schl8-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolEndDate,
	Schl8-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].GraduationDate,
	Schl8-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[7].AcademicQualificationName,
	Schl8-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[7].OverallGPA,
	Schl9-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolName,
	Schl9-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolType,
	Schl9-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCity,
	Schl9-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCountry,
	Schl9-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCountryCode,
	Schl9-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolStartDate,
	Schl9-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolEndDate,
	Schl9-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].GraduationDate,
	Schl9-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[8].AcademicQualificationName,
	Schl9-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[8].OverallGPA,
	Schl10-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolName,
	Schl10-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolType,
	Schl10-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCity,
	Schl10-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCountry,
	Schl10-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCountryCode,
	Schl10-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolStartDate,
	Schl10-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolEndDate,
	Schl10-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].GraduationDate,
	Schl10-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[9].AcademicQualificationName,
	Schl10-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[9].OverallGPA,
	Schl11-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolName,
	Schl11-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolType,
	Schl11-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCity,
	Schl11-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCountry,
	Schl11-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCountryCode,
	Schl11-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolStartDate,
	Schl11-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolEndDate,
	Schl11-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].GraduationDate,
	Schl11-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[10].AcademicQualificationName,
	Schl11-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[10].OverallGPA,
	Schl12-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolName,
	Schl12-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolType,
	Schl12-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCity,
	Schl12-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCountry,
	Schl12-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCountryCode,
	Schl12-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolStartDate,
	Schl12-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolEndDate,
	Schl12-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].GraduationDate,
	Schl12-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[11].AcademicQualificationName,
	Schl12-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[11].OverallGPA,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[0].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[0].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[0].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[0].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[0].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].WritingSubscore,
	Test2-TestName: studentApplication.StudentTestScores.*TestScoreNode[1].TestName,
	Test2-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[1].TestNameOther,
	Test2-TestDate: studentApplication.StudentTestScores.*TestScoreNode[1].TestDate,
	Test2-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[1].OfficialTestScore,
	Test2-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[1].OverallScore,
	Test2-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ListeningSubscore,
	Test2-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ReadingSubscore,
	Test2-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].SpeakingSubscore,
	Test2-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].WritingSubscore,
	Test3-TestName: studentApplication.StudentTestScores.*TestScoreNode[2].TestName,
	Test3-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[2].TestNameOther,
	Test3-TestDate: studentApplication.StudentTestScores.*TestScoreNode[2].TestDate,
	Test3-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[2].OfficialTestScore,
	Test3-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[2].OverallScore,
	Test3-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ListeningSubscore,
	Test3-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ReadingSubscore,
	Test3-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].SpeakingSubscore,
	Test3-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].WritingSubscore,
	Test4-TestName: studentApplication.StudentTestScores.*TestScoreNode[3].TestName,
	Test4-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[3].TestNameOther,
	Test4-TestDate: studentApplication.StudentTestScores.*TestScoreNode[3].TestDate,
	Test4-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[3].OfficialTestScore,
	Test4-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[3].OverallScore,
	Test4-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ListeningSubscore,
	Test4-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ReadingSubscore,
	Test4-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].SpeakingSubscore,
	Test4-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].WritingSubscore,
	Test5-TestName: studentApplication.StudentTestScores.*TestScoreNode[4].TestName,
	Test5-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[4].TestNameOther,
	Test5-TestDate: studentApplication.StudentTestScores.*TestScoreNode[4].TestDate,
	Test5-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[4].OfficialTestScore,
	Test5-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[4].OverallScore,
	Test5-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ListeningSubscore,
	Test5-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ReadingSubscore,
	Test5-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].SpeakingSubscore,
	Test5-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].WritingSubscore,
	Test6-TestName: studentApplication.StudentTestScores.*TestScoreNode[5].TestName,
	Test6-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[5].TestNameOther,
	Test6-TestDate: studentApplication.StudentTestScores.*TestScoreNode[5].TestDate,
	Test6-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[5].OfficialTestScore,
	Test6-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[5].OverallScore,
	Test6-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ListeningSubscore,
	Test6-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ReadingSubscore,
	Test6-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].SpeakingSubscore,
	Test6-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].WritingSubscore,
	Test7-TestName: studentApplication.StudentTestScores.*TestScoreNode[6].TestName,
	Test7-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[6].TestNameOther,
	Test7-TestDate: studentApplication.StudentTestScores.*TestScoreNode[6].TestDate,
	Test7-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[6].OfficialTestScore,
	Test7-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[6].OverallScore,
	Test7-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ListeningSubscore,
	Test7-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ReadingSubscore,
	Test7-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].SpeakingSubscore,
	Test7-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].WritingSubscore,
	Test8-TestName: studentApplication.StudentTestScores.*TestScoreNode[7].TestName,
	Test8-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[7].TestNameOther,
	Test8-TestDate: studentApplication.StudentTestScores.*TestScoreNode[7].TestDate,
	Test8-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[7].OfficialTestScore,
	Test8-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[7].OverallScore,
	Test8-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ListeningSubscore,
	Test8-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ReadingSubscore,
	Test8-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].SpeakingSubscore,
	Test8-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].WritingSubscore,
	Test9-TestName: studentApplication.StudentTestScores.*TestScoreNode[8].TestName,
	Test9-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[8].TestNameOther,
	Test9-TestDate: studentApplication.StudentTestScores.*TestScoreNode[8].TestDate,
	Test9-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[8].OfficialTestScore,
	Test9-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[8].OverallScore,
	Test9-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ListeningSubscore,
	Test9-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ReadingSubscore,
	Test9-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].SpeakingSubscore,
	Test9-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].WritingSubscore,
	Test10-TestName: studentApplication.StudentTestScores.*TestScoreNode[9].TestName,
	Test10-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[9].TestNameOther,
	Test10-TestDate: studentApplication.StudentTestScores.*TestScoreNode[9].TestDate,
	Test10-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[9].OfficialTestScore,
	Test10-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[9].OverallScore,
	Test10-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ListeningSubscore,
	Test10-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ReadingSubscore,
	Test10-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].SpeakingSubscore,
	Test10-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].WritingSubscore,
	Test11-TestName: studentApplication.StudentTestScores.*TestScoreNode[10].TestName,
	Test11-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[10].TestNameOther,
	Test11-TestDate: studentApplication.StudentTestScores.*TestScoreNode[10].TestDate,
	Test11-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[10].OfficialTestScore,
	Test11-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[10].OverallScore,
	Test11-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ListeningSubscore,
	Test11-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ReadingSubscore,
	Test11-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].SpeakingSubscore,
	Test11-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].WritingSubscore,
	Test12-TestName: studentApplication.StudentTestScores.*TestScoreNode[11].TestName,
	Test12-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[11].TestNameOther,
	Test12-TestDate: studentApplication.StudentTestScores.*TestScoreNode[11].TestDate,
	Test12-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[11].OfficialTestScore,
	Test12-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[11].OverallScore,
	Test12-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ListeningSubscore,
	Test12-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ReadingSubscore,
	Test12-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].SpeakingSubscore,
	Test12-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].WritingSubscore,
	Crse1-CourseId: studentApplication.CourseInformation.*CourseNode[1].CourseId,
	Crse1-ProgramName: studentApplication.CourseInformation.*CourseNode[1].ProgramName,
	Crse1-ProgramGroup: studentApplication.CourseInformation.*CourseNode[1].ProgramGroup,
	Crse1-ProgramType: studentApplication.CourseInformation.*CourseNode[1].ProgramType,
	Crse1-UniversityMajorCode: studentApplication.CourseInformation.*CourseNode[1].UniversityMajorCode,
	Crse1-CourseStartDate: studentApplication.CourseInformation.*CourseNode[1].CourseStartDate,
	Crse1-CourseEndDate: studentApplication.CourseInformation.*CourseNode[1].CourseEndDate,
	Crse1-LatestDecision: studentApplication.CourseInformation.*CourseNode[1].LatestDecision,
	Crse1-LatestDecisionDateTime: studentApplication.CourseInformation.*CourseNode[1].LatestDecisionDateTime,
	Crse1-LatestResponse: studentApplication.CourseInformation.*CourseNode[1].LatestResponse,
	Crse1-LatestResponseDateTime: studentApplication.CourseInformation.*CourseNode[1].LatestResponseDateTime
} when (studentApplication.CourseInformation.*CourseNode[1]?) otherwise {
}
	)) ++
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	PassportNumber: studentApplication.PassportNumber,
	PassportIssueDate: studentApplication.PassportIssueDate,
	PassportExpirationDate: studentApplication.PassportExpirationDate,
	PassportIssueCountry: studentApplication.PassportIssueCountry,
	PssprtIssueCntryCode: studentApplication.PassportIssueCountryCode,
	PassportPlaceOfBirth: studentApplication.PassportPlaceOfBirth,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	AcademicDisciplinaryIndicated: studentApplication.AcademicDisciplinaryIndicated,
	AcademicDisciplinaryDetails: studentApplication.AcademicDisciplinaryDetails,
	LegalDisciplinaryIndicated: studentApplication.LegalDisciplinaryIndicated,
	LegalDisciplinaryDetails: studentApplication.LegalDisciplinaryDetails,
	ApplicationStudentType: studentApplication.ApplicationStudentType,
	SourceOfApplication: studentApplication.SourceOfApplication,
	AgentName: studentApplication.AgentName,
	AgentUniqueIdentifier: studentApplication.AgentUniqueIdentifier,
	SponsorName: studentApplication.SponsorName,
	SponsorCode: studentApplication.SponsorCode,
	AccommodationFirstPreference: studentApplication.AccommodationFirstPreference,
	AccommodationSecondPreference: studentApplication.AccommodationSecondPreference,
	AccommodationThirdPreference: studentApplication.AccommodationThirdPreference,
	VisaType:studentApplication.VisaType,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Schl1-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolName,
	Schl1-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolType,
	Schl1-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCity,
	Schl1-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCountry,
	Schl1-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCountryCode,
	Schl1-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolStartDate,
	Schl1-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolEndDate,
	Schl1-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].GraduationDate,
	Schl1-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[0].AcademicQualificationName,
	Schl1-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[0].OverallGPA,
	Schl2-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolName,
	Schl2-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolType,
	Schl2-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCity,
	Schl2-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCountry,
	Schl2-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCountryCode,
	Schl2-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolStartDate,
	Schl2-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolEndDate,
	Schl2-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].GraduationDate,
	Schl2-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[1].AcademicQualificationName,
	Schl2-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[1].OverallGPA,
	Schl3-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolName,
	Schl3-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolType,
	Schl3-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCity,
	Schl3-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCountry,
	Schl3-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCountryCode,
	Schl3-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolStartDate,
	Schl3-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolEndDate,
	Schl3-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].GraduationDate,
	Schl3-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[2].AcademicQualificationName,
	Schl3-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[2].OverallGPA,
	Schl4-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolName,
	Schl4-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolType,
	Schl4-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCity,
	Schl4-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCountry,
	Schl4-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCountryCode,
	Schl4-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolStartDate,
	Schl4-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolEndDate,
	Schl4-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].GraduationDate,
	Schl4-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[3].AcademicQualificationName,
	Schl4-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[3].OverallGPA,
	Schl5-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolName,
	Schl5-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolType,
	Schl5-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCity,
	Schl5-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCountry,
	Schl5-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCountryCode,
	Schl5-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolStartDate,
	Schl5-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolEndDate,
	Schl5-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].GraduationDate,
	Schl5-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[4].AcademicQualificationName,
	Schl5-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[4].OverallGPA,
	Schl6-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolName,
	Schl6-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolType,
	Schl6-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCity,
	Schl6-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCountry,
	Schl6-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCountryCode,
	Schl6-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolStartDate,
	Schl6-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolEndDate,
	Schl6-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].GraduationDate,
	Schl6-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[5].AcademicQualificationName,
	Schl6-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[5].OverallGPA,
	Schl7-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolName,
	Schl7-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolType,
	Schl7-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCity,
	Schl7-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCountry,
	Schl7-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCountryCode,
	Schl7-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolStartDate,
	Schl7-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolEndDate,
	Schl7-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].GraduationDate,
	Schl7-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[6].AcademicQualificationName,
	Schl7-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[6].OverallGPA,
	Schl8-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolName,
	Schl8-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolType,
	Schl8-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCity,
	Schl8-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCountry,
	Schl8-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCountryCode,
	Schl8-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolStartDate,
	Schl8-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolEndDate,
	Schl8-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].GraduationDate,
	Schl8-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[7].AcademicQualificationName,
	Schl8-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[7].OverallGPA,
	Schl9-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolName,
	Schl9-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolType,
	Schl9-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCity,
	Schl9-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCountry,
	Schl9-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCountryCode,
	Schl9-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolStartDate,
	Schl9-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolEndDate,
	Schl9-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].GraduationDate,
	Schl9-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[8].AcademicQualificationName,
	Schl9-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[8].OverallGPA,
	Schl10-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolName,
	Schl10-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolType,
	Schl10-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCity,
	Schl10-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCountry,
	Schl10-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCountryCode,
	Schl10-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolStartDate,
	Schl10-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolEndDate,
	Schl10-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].GraduationDate,
	Schl10-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[9].AcademicQualificationName,
	Schl10-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[9].OverallGPA,
	Schl11-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolName,
	Schl11-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolType,
	Schl11-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCity,
	Schl11-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCountry,
	Schl11-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCountryCode,
	Schl11-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolStartDate,
	Schl11-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolEndDate,
	Schl11-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].GraduationDate,
	Schl11-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[10].AcademicQualificationName,
	Schl11-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[10].OverallGPA,
	Schl12-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolName,
	Schl12-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolType,
	Schl12-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCity,
	Schl12-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCountry,
	Schl12-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCountryCode,
	Schl12-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolStartDate,
	Schl12-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolEndDate,
	Schl12-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].GraduationDate,
	Schl12-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[11].AcademicQualificationName,
	Schl12-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[11].OverallGPA,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[0].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[0].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[0].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[0].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[0].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].WritingSubscore,
	Test2-TestName: studentApplication.StudentTestScores.*TestScoreNode[1].TestName,
	Test2-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[1].TestNameOther,
	Test2-TestDate: studentApplication.StudentTestScores.*TestScoreNode[1].TestDate,
	Test2-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[1].OfficialTestScore,
	Test2-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[1].OverallScore,
	Test2-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ListeningSubscore,
	Test2-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ReadingSubscore,
	Test2-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].SpeakingSubscore,
	Test2-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].WritingSubscore,
	Test3-TestName: studentApplication.StudentTestScores.*TestScoreNode[2].TestName,
	Test3-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[2].TestNameOther,
	Test3-TestDate: studentApplication.StudentTestScores.*TestScoreNode[2].TestDate,
	Test3-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[2].OfficialTestScore,
	Test3-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[2].OverallScore,
	Test3-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ListeningSubscore,
	Test3-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ReadingSubscore,
	Test3-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].SpeakingSubscore,
	Test3-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].WritingSubscore,
	Test4-TestName: studentApplication.StudentTestScores.*TestScoreNode[3].TestName,
	Test4-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[3].TestNameOther,
	Test4-TestDate: studentApplication.StudentTestScores.*TestScoreNode[3].TestDate,
	Test4-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[3].OfficialTestScore,
	Test4-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[3].OverallScore,
	Test4-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ListeningSubscore,
	Test4-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ReadingSubscore,
	Test4-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].SpeakingSubscore,
	Test4-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].WritingSubscore,
	Test5-TestName: studentApplication.StudentTestScores.*TestScoreNode[4].TestName,
	Test5-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[4].TestNameOther,
	Test5-TestDate: studentApplication.StudentTestScores.*TestScoreNode[4].TestDate,
	Test5-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[4].OfficialTestScore,
	Test5-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[4].OverallScore,
	Test5-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ListeningSubscore,
	Test5-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ReadingSubscore,
	Test5-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].SpeakingSubscore,
	Test5-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].WritingSubscore,
	Test6-TestName: studentApplication.StudentTestScores.*TestScoreNode[5].TestName,
	Test6-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[5].TestNameOther,
	Test6-TestDate: studentApplication.StudentTestScores.*TestScoreNode[5].TestDate,
	Test6-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[5].OfficialTestScore,
	Test6-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[5].OverallScore,
	Test6-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ListeningSubscore,
	Test6-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ReadingSubscore,
	Test6-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].SpeakingSubscore,
	Test6-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].WritingSubscore,
	Test7-TestName: studentApplication.StudentTestScores.*TestScoreNode[6].TestName,
	Test7-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[6].TestNameOther,
	Test7-TestDate: studentApplication.StudentTestScores.*TestScoreNode[6].TestDate,
	Test7-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[6].OfficialTestScore,
	Test7-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[6].OverallScore,
	Test7-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ListeningSubscore,
	Test7-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ReadingSubscore,
	Test7-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].SpeakingSubscore,
	Test7-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].WritingSubscore,
	Test8-TestName: studentApplication.StudentTestScores.*TestScoreNode[7].TestName,
	Test8-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[7].TestNameOther,
	Test8-TestDate: studentApplication.StudentTestScores.*TestScoreNode[7].TestDate,
	Test8-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[7].OfficialTestScore,
	Test8-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[7].OverallScore,
	Test8-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ListeningSubscore,
	Test8-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ReadingSubscore,
	Test8-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].SpeakingSubscore,
	Test8-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].WritingSubscore,
	Test9-TestName: studentApplication.StudentTestScores.*TestScoreNode[8].TestName,
	Test9-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[8].TestNameOther,
	Test9-TestDate: studentApplication.StudentTestScores.*TestScoreNode[8].TestDate,
	Test9-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[8].OfficialTestScore,
	Test9-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[8].OverallScore,
	Test9-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ListeningSubscore,
	Test9-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ReadingSubscore,
	Test9-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].SpeakingSubscore,
	Test9-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].WritingSubscore,
	Test10-TestName: studentApplication.StudentTestScores.*TestScoreNode[9].TestName,
	Test10-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[9].TestNameOther,
	Test10-TestDate: studentApplication.StudentTestScores.*TestScoreNode[9].TestDate,
	Test10-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[9].OfficialTestScore,
	Test10-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[9].OverallScore,
	Test10-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ListeningSubscore,
	Test10-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ReadingSubscore,
	Test10-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].SpeakingSubscore,
	Test10-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].WritingSubscore,
	Test11-TestName: studentApplication.StudentTestScores.*TestScoreNode[10].TestName,
	Test11-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[10].TestNameOther,
	Test11-TestDate: studentApplication.StudentTestScores.*TestScoreNode[10].TestDate,
	Test11-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[10].OfficialTestScore,
	Test11-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[10].OverallScore,
	Test11-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ListeningSubscore,
	Test11-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ReadingSubscore,
	Test11-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].SpeakingSubscore,
	Test11-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].WritingSubscore,
	Test12-TestName: studentApplication.StudentTestScores.*TestScoreNode[11].TestName,
	Test12-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[11].TestNameOther,
	Test12-TestDate: studentApplication.StudentTestScores.*TestScoreNode[11].TestDate,
	Test12-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[11].OfficialTestScore,
	Test12-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[11].OverallScore,
	Test12-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ListeningSubscore,
	Test12-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ReadingSubscore,
	Test12-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].SpeakingSubscore,
	Test12-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].WritingSubscore,
	Crse1-CourseId: studentApplication.CourseInformation.*CourseNode[2].CourseId,
	Crse1-ProgramName: studentApplication.CourseInformation.*CourseNode[2].ProgramName,
	Crse1-ProgramGroup: studentApplication.CourseInformation.*CourseNode[2].ProgramGroup,
	Crse1-ProgramType: studentApplication.CourseInformation.*CourseNode[2].ProgramType,
	Crse1-UniversityMajorCode: studentApplication.CourseInformation.*CourseNode[2].UniversityMajorCode,
	Crse1-CourseStartDate: studentApplication.CourseInformation.*CourseNode[2].CourseStartDate,
	Crse1-CourseEndDate: studentApplication.CourseInformation.*CourseNode[2].CourseEndDate,
	Crse1-LatestDecision: studentApplication.CourseInformation.*CourseNode[2].LatestDecision,
	Crse1-LatestDecisionDateTime: studentApplication.CourseInformation.*CourseNode[2].LatestDecisionDateTime,
	Crse1-LatestResponse: studentApplication.CourseInformation.*CourseNode[2].LatestResponse,
	Crse1-LatestResponseDateTime: studentApplication.CourseInformation.*CourseNode[2].LatestResponseDateTime
} when (studentApplication.CourseInformation.*CourseNode[2]?) otherwise {
}
	)) ++ 
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	PassportNumber: studentApplication.PassportNumber,
	PassportIssueDate: studentApplication.PassportIssueDate,
	PassportExpirationDate: studentApplication.PassportExpirationDate,
	PassportIssueCountry: studentApplication.PassportIssueCountry,
	PssprtIssueCntryCode: studentApplication.PassportIssueCountryCode,
	PassportPlaceOfBirth: studentApplication.PassportPlaceOfBirth,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	AcademicDisciplinaryIndicated: studentApplication.AcademicDisciplinaryIndicated,
	AcademicDisciplinaryDetails: studentApplication.AcademicDisciplinaryDetails,
	LegalDisciplinaryIndicated: studentApplication.LegalDisciplinaryIndicated,
	LegalDisciplinaryDetails: studentApplication.LegalDisciplinaryDetails,
	ApplicationStudentType: studentApplication.ApplicationStudentType,
	SourceOfApplication: studentApplication.SourceOfApplication,
	AgentName: studentApplication.AgentName,
	AgentUniqueIdentifier: studentApplication.AgentUniqueIdentifier,
	SponsorName: studentApplication.SponsorName,
	SponsorCode: studentApplication.SponsorCode,
	AccommodationFirstPreference: studentApplication.AccommodationFirstPreference,
	AccommodationSecondPreference: studentApplication.AccommodationSecondPreference,
	AccommodationThirdPreference: studentApplication.AccommodationThirdPreference,
	VisaType:studentApplication.VisaType,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Schl1-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolName,
	Schl1-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolType,
	Schl1-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCity,
	Schl1-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCountry,
	Schl1-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCountryCode,
	Schl1-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolStartDate,
	Schl1-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolEndDate,
	Schl1-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].GraduationDate,
	Schl1-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[0].AcademicQualificationName,
	Schl1-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[0].OverallGPA,
	Schl2-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolName,
	Schl2-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolType,
	Schl2-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCity,
	Schl2-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCountry,
	Schl2-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCountryCode,
	Schl2-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolStartDate,
	Schl2-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolEndDate,
	Schl2-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].GraduationDate,
	Schl2-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[1].AcademicQualificationName,
	Schl2-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[1].OverallGPA,
	Schl3-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolName,
	Schl3-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolType,
	Schl3-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCity,
	Schl3-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCountry,
	Schl3-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCountryCode,
	Schl3-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolStartDate,
	Schl3-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolEndDate,
	Schl3-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].GraduationDate,
	Schl3-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[2].AcademicQualificationName,
	Schl3-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[2].OverallGPA,
	Schl4-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolName,
	Schl4-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolType,
	Schl4-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCity,
	Schl4-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCountry,
	Schl4-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCountryCode,
	Schl4-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolStartDate,
	Schl4-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolEndDate,
	Schl4-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].GraduationDate,
	Schl4-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[3].AcademicQualificationName,
	Schl4-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[3].OverallGPA,
	Schl5-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolName,
	Schl5-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolType,
	Schl5-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCity,
	Schl5-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCountry,
	Schl5-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCountryCode,
	Schl5-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolStartDate,
	Schl5-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolEndDate,
	Schl5-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].GraduationDate,
	Schl5-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[4].AcademicQualificationName,
	Schl5-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[4].OverallGPA,
	Schl6-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolName,
	Schl6-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolType,
	Schl6-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCity,
	Schl6-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCountry,
	Schl6-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCountryCode,
	Schl6-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolStartDate,
	Schl6-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolEndDate,
	Schl6-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].GraduationDate,
	Schl6-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[5].AcademicQualificationName,
	Schl6-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[5].OverallGPA,
	Schl7-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolName,
	Schl7-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolType,
	Schl7-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCity,
	Schl7-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCountry,
	Schl7-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCountryCode,
	Schl7-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolStartDate,
	Schl7-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolEndDate,
	Schl7-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].GraduationDate,
	Schl7-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[6].AcademicQualificationName,
	Schl7-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[6].OverallGPA,
	Schl8-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolName,
	Schl8-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolType,
	Schl8-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCity,
	Schl8-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCountry,
	Schl8-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCountryCode,
	Schl8-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolStartDate,
	Schl8-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolEndDate,
	Schl8-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].GraduationDate,
	Schl8-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[7].AcademicQualificationName,
	Schl8-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[7].OverallGPA,
	Schl9-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolName,
	Schl9-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolType,
	Schl9-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCity,
	Schl9-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCountry,
	Schl9-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCountryCode,
	Schl9-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolStartDate,
	Schl9-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolEndDate,
	Schl9-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].GraduationDate,
	Schl9-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[8].AcademicQualificationName,
	Schl9-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[8].OverallGPA,
	Schl10-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolName,
	Schl10-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolType,
	Schl10-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCity,
	Schl10-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCountry,
	Schl10-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCountryCode,
	Schl10-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolStartDate,
	Schl10-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolEndDate,
	Schl10-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].GraduationDate,
	Schl10-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[9].AcademicQualificationName,
	Schl10-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[9].OverallGPA,
	Schl11-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolName,
	Schl11-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolType,
	Schl11-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCity,
	Schl11-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCountry,
	Schl11-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCountryCode,
	Schl11-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolStartDate,
	Schl11-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolEndDate,
	Schl11-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].GraduationDate,
	Schl11-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[10].AcademicQualificationName,
	Schl11-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[10].OverallGPA,
	Schl12-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolName,
	Schl12-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolType,
	Schl12-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCity,
	Schl12-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCountry,
	Schl12-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCountryCode,
	Schl12-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolStartDate,
	Schl12-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolEndDate,
	Schl12-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].GraduationDate,
	Schl12-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[11].AcademicQualificationName,
	Schl12-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[11].OverallGPA,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[0].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[0].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[0].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[0].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[0].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].WritingSubscore,
	Test2-TestName: studentApplication.StudentTestScores.*TestScoreNode[1].TestName,
	Test2-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[1].TestNameOther,
	Test2-TestDate: studentApplication.StudentTestScores.*TestScoreNode[1].TestDate,
	Test2-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[1].OfficialTestScore,
	Test2-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[1].OverallScore,
	Test2-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ListeningSubscore,
	Test2-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ReadingSubscore,
	Test2-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].SpeakingSubscore,
	Test2-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].WritingSubscore,
	Test3-TestName: studentApplication.StudentTestScores.*TestScoreNode[2].TestName,
	Test3-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[2].TestNameOther,
	Test3-TestDate: studentApplication.StudentTestScores.*TestScoreNode[2].TestDate,
	Test3-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[2].OfficialTestScore,
	Test3-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[2].OverallScore,
	Test3-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ListeningSubscore,
	Test3-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ReadingSubscore,
	Test3-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].SpeakingSubscore,
	Test3-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].WritingSubscore,
	Test4-TestName: studentApplication.StudentTestScores.*TestScoreNode[3].TestName,
	Test4-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[3].TestNameOther,
	Test4-TestDate: studentApplication.StudentTestScores.*TestScoreNode[3].TestDate,
	Test4-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[3].OfficialTestScore,
	Test4-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[3].OverallScore,
	Test4-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ListeningSubscore,
	Test4-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ReadingSubscore,
	Test4-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].SpeakingSubscore,
	Test4-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].WritingSubscore,
	Test5-TestName: studentApplication.StudentTestScores.*TestScoreNode[4].TestName,
	Test5-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[4].TestNameOther,
	Test5-TestDate: studentApplication.StudentTestScores.*TestScoreNode[4].TestDate,
	Test5-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[4].OfficialTestScore,
	Test5-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[4].OverallScore,
	Test5-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ListeningSubscore,
	Test5-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ReadingSubscore,
	Test5-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].SpeakingSubscore,
	Test5-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].WritingSubscore,
	Test6-TestName: studentApplication.StudentTestScores.*TestScoreNode[5].TestName,
	Test6-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[5].TestNameOther,
	Test6-TestDate: studentApplication.StudentTestScores.*TestScoreNode[5].TestDate,
	Test6-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[5].OfficialTestScore,
	Test6-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[5].OverallScore,
	Test6-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ListeningSubscore,
	Test6-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ReadingSubscore,
	Test6-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].SpeakingSubscore,
	Test6-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].WritingSubscore,
	Test7-TestName: studentApplication.StudentTestScores.*TestScoreNode[6].TestName,
	Test7-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[6].TestNameOther,
	Test7-TestDate: studentApplication.StudentTestScores.*TestScoreNode[6].TestDate,
	Test7-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[6].OfficialTestScore,
	Test7-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[6].OverallScore,
	Test7-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ListeningSubscore,
	Test7-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ReadingSubscore,
	Test7-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].SpeakingSubscore,
	Test7-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].WritingSubscore,
	Test8-TestName: studentApplication.StudentTestScores.*TestScoreNode[7].TestName,
	Test8-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[7].TestNameOther,
	Test8-TestDate: studentApplication.StudentTestScores.*TestScoreNode[7].TestDate,
	Test8-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[7].OfficialTestScore,
	Test8-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[7].OverallScore,
	Test8-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ListeningSubscore,
	Test8-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ReadingSubscore,
	Test8-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].SpeakingSubscore,
	Test8-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].WritingSubscore,
	Test9-TestName: studentApplication.StudentTestScores.*TestScoreNode[8].TestName,
	Test9-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[8].TestNameOther,
	Test9-TestDate: studentApplication.StudentTestScores.*TestScoreNode[8].TestDate,
	Test9-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[8].OfficialTestScore,
	Test9-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[8].OverallScore,
	Test9-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ListeningSubscore,
	Test9-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ReadingSubscore,
	Test9-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].SpeakingSubscore,
	Test9-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].WritingSubscore,
	Test10-TestName: studentApplication.StudentTestScores.*TestScoreNode[9].TestName,
	Test10-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[9].TestNameOther,
	Test10-TestDate: studentApplication.StudentTestScores.*TestScoreNode[9].TestDate,
	Test10-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[9].OfficialTestScore,
	Test10-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[9].OverallScore,
	Test10-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ListeningSubscore,
	Test10-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ReadingSubscore,
	Test10-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].SpeakingSubscore,
	Test10-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].WritingSubscore,
	Test11-TestName: studentApplication.StudentTestScores.*TestScoreNode[10].TestName,
	Test11-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[10].TestNameOther,
	Test11-TestDate: studentApplication.StudentTestScores.*TestScoreNode[10].TestDate,
	Test11-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[10].OfficialTestScore,
	Test11-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[10].OverallScore,
	Test11-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ListeningSubscore,
	Test11-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ReadingSubscore,
	Test11-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].SpeakingSubscore,
	Test11-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].WritingSubscore,
	Test12-TestName: studentApplication.StudentTestScores.*TestScoreNode[11].TestName,
	Test12-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[11].TestNameOther,
	Test12-TestDate: studentApplication.StudentTestScores.*TestScoreNode[11].TestDate,
	Test12-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[11].OfficialTestScore,
	Test12-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[11].OverallScore,
	Test12-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ListeningSubscore,
	Test12-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ReadingSubscore,
	Test12-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].SpeakingSubscore,
	Test12-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].WritingSubscore,
	Crse1-CourseId: studentApplication.CourseInformation.*CourseNode[3].CourseId,
	Crse1-ProgramName: studentApplication.CourseInformation.*CourseNode[3].ProgramName,
	Crse1-ProgramGroup: studentApplication.CourseInformation.*CourseNode[3].ProgramGroup,
	Crse1-ProgramType: studentApplication.CourseInformation.*CourseNode[3].ProgramType,
	Crse1-UniversityMajorCode: studentApplication.CourseInformation.*CourseNode[3].UniversityMajorCode,
	Crse1-CourseStartDate: studentApplication.CourseInformation.*CourseNode[3].CourseStartDate,
	Crse1-CourseEndDate: studentApplication.CourseInformation.*CourseNode[3].CourseEndDate,
	Crse1-LatestDecision: studentApplication.CourseInformation.*CourseNode[3].LatestDecision,
	Crse1-LatestDecisionDateTime: studentApplication.CourseInformation.*CourseNode[3].LatestDecisionDateTime,
	Crse1-LatestResponse: studentApplication.CourseInformation.*CourseNode[3].LatestResponse,
	Crse1-LatestResponseDateTime: studentApplication.CourseInformation.*CourseNode[3].LatestResponseDateTime
} when (studentApplication.CourseInformation.*CourseNode[3]?) otherwise {
}
	)) ++
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	PassportNumber: studentApplication.PassportNumber,
	PassportIssueDate: studentApplication.PassportIssueDate,
	PassportExpirationDate: studentApplication.PassportExpirationDate,
	PassportIssueCountry: studentApplication.PassportIssueCountry,
	PssprtIssueCntryCode: studentApplication.PassportIssueCountryCode,
	PassportPlaceOfBirth: studentApplication.PassportPlaceOfBirth,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	AcademicDisciplinaryIndicated: studentApplication.AcademicDisciplinaryIndicated,
	AcademicDisciplinaryDetails: studentApplication.AcademicDisciplinaryDetails,
	LegalDisciplinaryIndicated: studentApplication.LegalDisciplinaryIndicated,
	LegalDisciplinaryDetails: studentApplication.LegalDisciplinaryDetails,
	ApplicationStudentType: studentApplication.ApplicationStudentType,
	SourceOfApplication: studentApplication.SourceOfApplication,
	AgentName: studentApplication.AgentName,
	AgentUniqueIdentifier: studentApplication.AgentUniqueIdentifier,
	SponsorName: studentApplication.SponsorName,
	SponsorCode: studentApplication.SponsorCode,
	AccommodationFirstPreference: studentApplication.AccommodationFirstPreference,
	AccommodationSecondPreference: studentApplication.AccommodationSecondPreference,
	AccommodationThirdPreference: studentApplication.AccommodationThirdPreference,
	VisaType:studentApplication.VisaType,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Schl1-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolName,
	Schl1-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolType,
	Schl1-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCity,
	Schl1-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCountry,
	Schl1-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCountryCode,
	Schl1-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolStartDate,
	Schl1-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolEndDate,
	Schl1-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].GraduationDate,
	Schl1-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[0].AcademicQualificationName,
	Schl1-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[0].OverallGPA,
	Schl2-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolName,
	Schl2-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolType,
	Schl2-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCity,
	Schl2-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCountry,
	Schl2-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCountryCode,
	Schl2-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolStartDate,
	Schl2-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolEndDate,
	Schl2-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].GraduationDate,
	Schl2-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[1].AcademicQualificationName,
	Schl2-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[1].OverallGPA,
	Schl3-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolName,
	Schl3-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolType,
	Schl3-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCity,
	Schl3-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCountry,
	Schl3-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCountryCode,
	Schl3-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolStartDate,
	Schl3-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolEndDate,
	Schl3-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].GraduationDate,
	Schl3-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[2].AcademicQualificationName,
	Schl3-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[2].OverallGPA,
	Schl4-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolName,
	Schl4-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolType,
	Schl4-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCity,
	Schl4-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCountry,
	Schl4-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCountryCode,
	Schl4-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolStartDate,
	Schl4-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolEndDate,
	Schl4-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].GraduationDate,
	Schl4-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[3].AcademicQualificationName,
	Schl4-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[3].OverallGPA,
	Schl5-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolName,
	Schl5-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolType,
	Schl5-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCity,
	Schl5-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCountry,
	Schl5-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCountryCode,
	Schl5-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolStartDate,
	Schl5-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolEndDate,
	Schl5-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].GraduationDate,
	Schl5-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[4].AcademicQualificationName,
	Schl5-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[4].OverallGPA,
	Schl6-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolName,
	Schl6-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolType,
	Schl6-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCity,
	Schl6-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCountry,
	Schl6-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCountryCode,
	Schl6-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolStartDate,
	Schl6-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolEndDate,
	Schl6-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].GraduationDate,
	Schl6-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[5].AcademicQualificationName,
	Schl6-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[5].OverallGPA,
	Schl7-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolName,
	Schl7-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolType,
	Schl7-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCity,
	Schl7-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCountry,
	Schl7-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCountryCode,
	Schl7-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolStartDate,
	Schl7-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolEndDate,
	Schl7-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].GraduationDate,
	Schl7-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[6].AcademicQualificationName,
	Schl7-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[6].OverallGPA,
	Schl8-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolName,
	Schl8-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolType,
	Schl8-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCity,
	Schl8-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCountry,
	Schl8-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCountryCode,
	Schl8-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolStartDate,
	Schl8-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolEndDate,
	Schl8-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].GraduationDate,
	Schl8-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[7].AcademicQualificationName,
	Schl8-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[7].OverallGPA,
	Schl9-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolName,
	Schl9-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolType,
	Schl9-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCity,
	Schl9-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCountry,
	Schl9-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCountryCode,
	Schl9-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolStartDate,
	Schl9-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolEndDate,
	Schl9-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].GraduationDate,
	Schl9-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[8].AcademicQualificationName,
	Schl9-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[8].OverallGPA,
	Schl10-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolName,
	Schl10-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolType,
	Schl10-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCity,
	Schl10-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCountry,
	Schl10-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCountryCode,
	Schl10-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolStartDate,
	Schl10-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolEndDate,
	Schl10-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].GraduationDate,
	Schl10-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[9].AcademicQualificationName,
	Schl10-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[9].OverallGPA,
	Schl11-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolName,
	Schl11-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolType,
	Schl11-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCity,
	Schl11-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCountry,
	Schl11-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCountryCode,
	Schl11-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolStartDate,
	Schl11-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolEndDate,
	Schl11-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].GraduationDate,
	Schl11-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[10].AcademicQualificationName,
	Schl11-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[10].OverallGPA,
	Schl12-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolName,
	Schl12-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolType,
	Schl12-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCity,
	Schl12-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCountry,
	Schl12-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCountryCode,
	Schl12-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolStartDate,
	Schl12-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolEndDate,
	Schl12-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].GraduationDate,
	Schl12-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[11].AcademicQualificationName,
	Schl12-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[11].OverallGPA,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[0].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[0].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[0].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[0].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[0].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].WritingSubscore,
	Test2-TestName: studentApplication.StudentTestScores.*TestScoreNode[1].TestName,
	Test2-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[1].TestNameOther,
	Test2-TestDate: studentApplication.StudentTestScores.*TestScoreNode[1].TestDate,
	Test2-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[1].OfficialTestScore,
	Test2-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[1].OverallScore,
	Test2-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ListeningSubscore,
	Test2-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ReadingSubscore,
	Test2-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].SpeakingSubscore,
	Test2-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].WritingSubscore,
	Test3-TestName: studentApplication.StudentTestScores.*TestScoreNode[2].TestName,
	Test3-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[2].TestNameOther,
	Test3-TestDate: studentApplication.StudentTestScores.*TestScoreNode[2].TestDate,
	Test3-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[2].OfficialTestScore,
	Test3-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[2].OverallScore,
	Test3-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ListeningSubscore,
	Test3-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ReadingSubscore,
	Test3-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].SpeakingSubscore,
	Test3-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].WritingSubscore,
	Test4-TestName: studentApplication.StudentTestScores.*TestScoreNode[3].TestName,
	Test4-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[3].TestNameOther,
	Test4-TestDate: studentApplication.StudentTestScores.*TestScoreNode[3].TestDate,
	Test4-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[3].OfficialTestScore,
	Test4-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[3].OverallScore,
	Test4-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ListeningSubscore,
	Test4-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ReadingSubscore,
	Test4-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].SpeakingSubscore,
	Test4-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].WritingSubscore,
	Test5-TestName: studentApplication.StudentTestScores.*TestScoreNode[4].TestName,
	Test5-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[4].TestNameOther,
	Test5-TestDate: studentApplication.StudentTestScores.*TestScoreNode[4].TestDate,
	Test5-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[4].OfficialTestScore,
	Test5-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[4].OverallScore,
	Test5-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ListeningSubscore,
	Test5-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ReadingSubscore,
	Test5-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].SpeakingSubscore,
	Test5-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].WritingSubscore,
	Test6-TestName: studentApplication.StudentTestScores.*TestScoreNode[5].TestName,
	Test6-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[5].TestNameOther,
	Test6-TestDate: studentApplication.StudentTestScores.*TestScoreNode[5].TestDate,
	Test6-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[5].OfficialTestScore,
	Test6-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[5].OverallScore,
	Test6-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ListeningSubscore,
	Test6-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ReadingSubscore,
	Test6-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].SpeakingSubscore,
	Test6-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].WritingSubscore,
	Test7-TestName: studentApplication.StudentTestScores.*TestScoreNode[6].TestName,
	Test7-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[6].TestNameOther,
	Test7-TestDate: studentApplication.StudentTestScores.*TestScoreNode[6].TestDate,
	Test7-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[6].OfficialTestScore,
	Test7-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[6].OverallScore,
	Test7-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ListeningSubscore,
	Test7-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ReadingSubscore,
	Test7-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].SpeakingSubscore,
	Test7-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].WritingSubscore,
	Test8-TestName: studentApplication.StudentTestScores.*TestScoreNode[7].TestName,
	Test8-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[7].TestNameOther,
	Test8-TestDate: studentApplication.StudentTestScores.*TestScoreNode[7].TestDate,
	Test8-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[7].OfficialTestScore,
	Test8-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[7].OverallScore,
	Test8-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ListeningSubscore,
	Test8-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ReadingSubscore,
	Test8-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].SpeakingSubscore,
	Test8-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].WritingSubscore,
	Test9-TestName: studentApplication.StudentTestScores.*TestScoreNode[8].TestName,
	Test9-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[8].TestNameOther,
	Test9-TestDate: studentApplication.StudentTestScores.*TestScoreNode[8].TestDate,
	Test9-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[8].OfficialTestScore,
	Test9-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[8].OverallScore,
	Test9-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ListeningSubscore,
	Test9-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ReadingSubscore,
	Test9-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].SpeakingSubscore,
	Test9-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].WritingSubscore,
	Test10-TestName: studentApplication.StudentTestScores.*TestScoreNode[9].TestName,
	Test10-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[9].TestNameOther,
	Test10-TestDate: studentApplication.StudentTestScores.*TestScoreNode[9].TestDate,
	Test10-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[9].OfficialTestScore,
	Test10-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[9].OverallScore,
	Test10-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ListeningSubscore,
	Test10-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ReadingSubscore,
	Test10-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].SpeakingSubscore,
	Test10-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].WritingSubscore,
	Test11-TestName: studentApplication.StudentTestScores.*TestScoreNode[10].TestName,
	Test11-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[10].TestNameOther,
	Test11-TestDate: studentApplication.StudentTestScores.*TestScoreNode[10].TestDate,
	Test11-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[10].OfficialTestScore,
	Test11-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[10].OverallScore,
	Test11-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ListeningSubscore,
	Test11-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ReadingSubscore,
	Test11-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].SpeakingSubscore,
	Test11-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].WritingSubscore,
	Test12-TestName: studentApplication.StudentTestScores.*TestScoreNode[11].TestName,
	Test12-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[11].TestNameOther,
	Test12-TestDate: studentApplication.StudentTestScores.*TestScoreNode[11].TestDate,
	Test12-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[11].OfficialTestScore,
	Test12-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[11].OverallScore,
	Test12-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ListeningSubscore,
	Test12-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ReadingSubscore,
	Test12-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].SpeakingSubscore,
	Test12-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].WritingSubscore,
	Crse1-CourseId: studentApplication.CourseInformation.*CourseNode[4].CourseId,
	Crse1-ProgramName: studentApplication.CourseInformation.*CourseNode[4].ProgramName,
	Crse1-ProgramGroup: studentApplication.CourseInformation.*CourseNode[4].ProgramGroup,
	Crse1-ProgramType: studentApplication.CourseInformation.*CourseNode[4].ProgramType,
	Crse1-UniversityMajorCode: studentApplication.CourseInformation.*CourseNode[4].UniversityMajorCode,
	Crse1-CourseStartDate: studentApplication.CourseInformation.*CourseNode[4].CourseStartDate,
	Crse1-CourseEndDate: studentApplication.CourseInformation.*CourseNode[4].CourseEndDate,
	Crse1-LatestDecision: studentApplication.CourseInformation.*CourseNode[4].LatestDecision,
	Crse1-LatestDecisionDateTime: studentApplication.CourseInformation.*CourseNode[4].LatestDecisionDateTime,
	Crse1-LatestResponse: studentApplication.CourseInformation.*CourseNode[4].LatestResponse,
	Crse1-LatestResponseDateTime: studentApplication.CourseInformation.*CourseNode[4].LatestResponseDateTime
} when (studentApplication.CourseInformation.*CourseNode[4]?) otherwise {
}
	)) ++
	(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CntryCodeOfBirth: studentApplication.CountryCodeOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CntryCodeOfCitznship: studentApplication.CountryCodeOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CntryCodeOfNationality: studentApplication.CountryCodeOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	PassportNumber: studentApplication.PassportNumber,
	PassportIssueDate: studentApplication.PassportIssueDate,
	PassportExpirationDate: studentApplication.PassportExpirationDate,
	PassportIssueCountry: studentApplication.PassportIssueCountry,
	PssprtIssueCntryCode: studentApplication.PassportIssueCountryCode,
	PassportPlaceOfBirth: studentApplication.PassportPlaceOfBirth,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	AcademicDisciplinaryIndicated: studentApplication.AcademicDisciplinaryIndicated,
	AcademicDisciplinaryDetails: studentApplication.AcademicDisciplinaryDetails,
	LegalDisciplinaryIndicated: studentApplication.LegalDisciplinaryIndicated,
	LegalDisciplinaryDetails: studentApplication.LegalDisciplinaryDetails,
	ApplicationStudentType: studentApplication.ApplicationStudentType,
	SourceOfApplication: studentApplication.SourceOfApplication,
	AgentName: studentApplication.AgentName,
	AgentUniqueIdentifier: studentApplication.AgentUniqueIdentifier,
	SponsorName: studentApplication.SponsorName,
	SponsorCode: studentApplication.SponsorCode,
	AccommodationFirstPreference: studentApplication.AccommodationFirstPreference,
	AccommodationSecondPreference: studentApplication.AccommodationSecondPreference,
	AccommodationThirdPreference: studentApplication.AccommodationThirdPreference,
	VisaType:studentApplication.VisaType,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr1-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[0].AddressCountryCode,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Addr2-AddrCntryCode: studentApplication.AddressInformation.*AddressNode[1].AddressCountryCode,
	Schl1-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolName,
	Schl1-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolType,
	Schl1-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCity,
	Schl1-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCountry,
	Schl1-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCountryCode,
	Schl1-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolStartDate,
	Schl1-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolEndDate,
	Schl1-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].GraduationDate,
	Schl1-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[0].AcademicQualificationName,
	Schl1-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[0].OverallGPA,
	Schl2-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolName,
	Schl2-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolType,
	Schl2-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCity,
	Schl2-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCountry,
	Schl2-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCountryCode,
	Schl2-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolStartDate,
	Schl2-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolEndDate,
	Schl2-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].GraduationDate,
	Schl2-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[1].AcademicQualificationName,
	Schl2-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[1].OverallGPA,
	Schl3-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolName,
	Schl3-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolType,
	Schl3-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCity,
	Schl3-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCountry,
	Schl3-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCountryCode,
	Schl3-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolStartDate,
	Schl3-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolEndDate,
	Schl3-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].GraduationDate,
	Schl3-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[2].AcademicQualificationName,
	Schl3-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[2].OverallGPA,
	Schl4-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolName,
	Schl4-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolType,
	Schl4-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCity,
	Schl4-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCountry,
	Schl4-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCountryCode,
	Schl4-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolStartDate,
	Schl4-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolEndDate,
	Schl4-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].GraduationDate,
	Schl4-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[3].AcademicQualificationName,
	Schl4-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[3].OverallGPA,
	Schl5-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolName,
	Schl5-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolType,
	Schl5-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCity,
	Schl5-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCountry,
	Schl5-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCountryCode,
	Schl5-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolStartDate,
	Schl5-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolEndDate,
	Schl5-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].GraduationDate,
	Schl5-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[4].AcademicQualificationName,
	Schl5-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[4].OverallGPA,
	Schl6-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolName,
	Schl6-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolType,
	Schl6-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCity,
	Schl6-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCountry,
	Schl6-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCountryCode,
	Schl6-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolStartDate,
	Schl6-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolEndDate,
	Schl6-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].GraduationDate,
	Schl6-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[5].AcademicQualificationName,
	Schl6-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[5].OverallGPA,
	Schl7-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolName,
	Schl7-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolType,
	Schl7-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCity,
	Schl7-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCountry,
	Schl7-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCountryCode,
	Schl7-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolStartDate,
	Schl7-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolEndDate,
	Schl7-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].GraduationDate,
	Schl7-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[6].AcademicQualificationName,
	Schl7-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[6].OverallGPA,
	Schl8-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolName,
	Schl8-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolType,
	Schl8-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCity,
	Schl8-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCountry,
	Schl8-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCountryCode,
	Schl8-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolStartDate,
	Schl8-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolEndDate,
	Schl8-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].GraduationDate,
	Schl8-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[7].AcademicQualificationName,
	Schl8-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[7].OverallGPA,
	Schl9-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolName,
	Schl9-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolType,
	Schl9-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCity,
	Schl9-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCountry,
	Schl9-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCountryCode,
	Schl9-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolStartDate,
	Schl9-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolEndDate,
	Schl9-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].GraduationDate,
	Schl9-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[8].AcademicQualificationName,
	Schl9-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[8].OverallGPA,
	Schl10-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolName,
	Schl10-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolType,
	Schl10-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCity,
	Schl10-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCountry,
	Schl10-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCountryCode,
	Schl10-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolStartDate,
	Schl10-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolEndDate,
	Schl10-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].GraduationDate,
	Schl10-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[9].AcademicQualificationName,
	Schl10-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[9].OverallGPA,
	Schl11-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolName,
	Schl11-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolType,
	Schl11-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCity,
	Schl11-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCountry,
	Schl11-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCountryCode,
	Schl11-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolStartDate,
	Schl11-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolEndDate,
	Schl11-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].GraduationDate,
	Schl11-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[10].AcademicQualificationName,
	Schl11-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[10].OverallGPA,
	Schl12-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolName,
	Schl12-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolType,
	Schl12-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCity,
	Schl12-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCountry,
	Schl12-SchoolCntryCode: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCountryCode,
	Schl12-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolStartDate,
	Schl12-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolEndDate,
	Schl12-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].GraduationDate,
	Schl12-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[11].AcademicQualificationName,
	Schl12-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[11].OverallGPA,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[0].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[0].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[0].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[0].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[0].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].WritingSubscore,
	Test2-TestName: studentApplication.StudentTestScores.*TestScoreNode[1].TestName,
	Test2-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[1].TestNameOther,
	Test2-TestDate: studentApplication.StudentTestScores.*TestScoreNode[1].TestDate,
	Test2-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[1].OfficialTestScore,
	Test2-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[1].OverallScore,
	Test2-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ListeningSubscore,
	Test2-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ReadingSubscore,
	Test2-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].SpeakingSubscore,
	Test2-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].WritingSubscore,
	Test3-TestName: studentApplication.StudentTestScores.*TestScoreNode[2].TestName,
	Test3-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[2].TestNameOther,
	Test3-TestDate: studentApplication.StudentTestScores.*TestScoreNode[2].TestDate,
	Test3-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[2].OfficialTestScore,
	Test3-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[2].OverallScore,
	Test3-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ListeningSubscore,
	Test3-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ReadingSubscore,
	Test3-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].SpeakingSubscore,
	Test3-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].WritingSubscore,
	Test4-TestName: studentApplication.StudentTestScores.*TestScoreNode[3].TestName,
	Test4-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[3].TestNameOther,
	Test4-TestDate: studentApplication.StudentTestScores.*TestScoreNode[3].TestDate,
	Test4-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[3].OfficialTestScore,
	Test4-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[3].OverallScore,
	Test4-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ListeningSubscore,
	Test4-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ReadingSubscore,
	Test4-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].SpeakingSubscore,
	Test4-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].WritingSubscore,
	Test5-TestName: studentApplication.StudentTestScores.*TestScoreNode[4].TestName,
	Test5-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[4].TestNameOther,
	Test5-TestDate: studentApplication.StudentTestScores.*TestScoreNode[4].TestDate,
	Test5-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[4].OfficialTestScore,
	Test5-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[4].OverallScore,
	Test5-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ListeningSubscore,
	Test5-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ReadingSubscore,
	Test5-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].SpeakingSubscore,
	Test5-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].WritingSubscore,
	Test6-TestName: studentApplication.StudentTestScores.*TestScoreNode[5].TestName,
	Test6-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[5].TestNameOther,
	Test6-TestDate: studentApplication.StudentTestScores.*TestScoreNode[5].TestDate,
	Test6-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[5].OfficialTestScore,
	Test6-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[5].OverallScore,
	Test6-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ListeningSubscore,
	Test6-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ReadingSubscore,
	Test6-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].SpeakingSubscore,
	Test6-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].WritingSubscore,
	Test7-TestName: studentApplication.StudentTestScores.*TestScoreNode[6].TestName,
	Test7-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[6].TestNameOther,
	Test7-TestDate: studentApplication.StudentTestScores.*TestScoreNode[6].TestDate,
	Test7-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[6].OfficialTestScore,
	Test7-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[6].OverallScore,
	Test7-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ListeningSubscore,
	Test7-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ReadingSubscore,
	Test7-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].SpeakingSubscore,
	Test7-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].WritingSubscore,
	Test8-TestName: studentApplication.StudentTestScores.*TestScoreNode[7].TestName,
	Test8-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[7].TestNameOther,
	Test8-TestDate: studentApplication.StudentTestScores.*TestScoreNode[7].TestDate,
	Test8-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[7].OfficialTestScore,
	Test8-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[7].OverallScore,
	Test8-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ListeningSubscore,
	Test8-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ReadingSubscore,
	Test8-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].SpeakingSubscore,
	Test8-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].WritingSubscore,
	Test9-TestName: studentApplication.StudentTestScores.*TestScoreNode[8].TestName,
	Test9-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[8].TestNameOther,
	Test9-TestDate: studentApplication.StudentTestScores.*TestScoreNode[8].TestDate,
	Test9-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[8].OfficialTestScore,
	Test9-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[8].OverallScore,
	Test9-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ListeningSubscore,
	Test9-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ReadingSubscore,
	Test9-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].SpeakingSubscore,
	Test9-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].WritingSubscore,
	Test10-TestName: studentApplication.StudentTestScores.*TestScoreNode[9].TestName,
	Test10-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[9].TestNameOther,
	Test10-TestDate: studentApplication.StudentTestScores.*TestScoreNode[9].TestDate,
	Test10-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[9].OfficialTestScore,
	Test10-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[9].OverallScore,
	Test10-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ListeningSubscore,
	Test10-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ReadingSubscore,
	Test10-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].SpeakingSubscore,
	Test10-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].WritingSubscore,
	Test11-TestName: studentApplication.StudentTestScores.*TestScoreNode[10].TestName,
	Test11-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[10].TestNameOther,
	Test11-TestDate: studentApplication.StudentTestScores.*TestScoreNode[10].TestDate,
	Test11-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[10].OfficialTestScore,
	Test11-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[10].OverallScore,
	Test11-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ListeningSubscore,
	Test11-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ReadingSubscore,
	Test11-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].SpeakingSubscore,
	Test11-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].WritingSubscore,
	Test12-TestName: studentApplication.StudentTestScores.*TestScoreNode[11].TestName,
	Test12-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[11].TestNameOther,
	Test12-TestDate: studentApplication.StudentTestScores.*TestScoreNode[11].TestDate,
	Test12-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[11].OfficialTestScore,
	Test12-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[11].OverallScore,
	Test12-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ListeningSubscore,
	Test12-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ReadingSubscore,
	Test12-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].SpeakingSubscore,
	Test12-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].WritingSubscore,
	Crse1-CourseId: studentApplication.CourseInformation.*CourseNode[5].CourseId,
	Crse1-ProgramName: studentApplication.CourseInformation.*CourseNode[5].ProgramName,
	Crse1-ProgramGroup: studentApplication.CourseInformation.*CourseNode[5].ProgramGroup,
	Crse1-ProgramType: studentApplication.CourseInformation.*CourseNode[5].ProgramType,
	Crse1-UniversityMajorCode: studentApplication.CourseInformation.*CourseNode[5].UniversityMajorCode,
	Crse1-CourseStartDate: studentApplication.CourseInformation.*CourseNode[5].CourseStartDate,
	Crse1-CourseEndDate: studentApplication.CourseInformation.*CourseNode[5].CourseEndDate,
	Crse1-LatestDecision: studentApplication.CourseInformation.*CourseNode[5].LatestDecision,
	Crse1-LatestDecisionDateTime: studentApplication.CourseInformation.*CourseNode[5].LatestDecisionDateTime,
	Crse1-LatestResponse: studentApplication.CourseInformation.*CourseNode[5].LatestResponse,
	Crse1-LatestResponseDateTime: studentApplication.CourseInformation.*CourseNode[5].LatestResponseDateTime
} when (studentApplication.CourseInformation.*CourseNode[5]?) otherwise {
}
	))]]></dw:set-payload>
                </dw:transform-message>
                <logger message="${mule.env} : Course Transformed" level="INFO" doc:name="Logger"/>
                <dw:transform-message doc:name="Course Dup Transform" metadata:id="9dbc9673-2df8-4446-bac2-685314d01a27">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/csv separator="," , ignoreEmptyLine=true, quoteValues=true, header=false
---
payload map ((payload01 , indexOfPayload01) -> {
	SalesforceApplicationID: payload01.SalesforceApplicationID,
	INTOCenterName: payload01.INTOCenterName,
	ApplicationCreationDateTime: payload01.ApplicationCreationDateTime,
	FirstName: payload01.FirstName,
	LastName: payload01.LastName,
	MiddleName: payload01.MiddleName,
	Gender: payload01.Gender,
	DateOfBirth: payload01.DateOfBirth,
	CountryOfBirth: payload01.CountryOfBirth,
	CntryCodeOfBirth: payload01.CntryCodeOfBirth,
	CountryOfCitizenship: payload01.CountryOfCitizenship,
	CntryCodeOfCitznship: payload01.CntryCodeOfCitznship,
	CountryOfNationality: payload01.CountryOfNationality,
	CntryCodeOfNationality: payload01.CntryCodeOfNationality,
	CurrentlyLivingInUS: payload01.CurrentlyLivingInUS,
	CitizenshipType: payload01.CitizenshipType,
	PassportNumber: payload01.PassportNumber,
	PassportIssueDate: payload01.PassportIssueDate,
	PassportExpirationDate: payload01.PassportExpirationDate,
	PassportIssueCountry: payload01.PassportIssueCountry,
	PssprtIssueCntryCode: payload01.PssprtIssueCntryCode,
	PassportPlaceOfBirth: payload01.PassportPlaceOfBirth,
	StudentEmailAddress: payload01.StudentEmailAddress,
	PhoneNumber: payload01.PhoneNumber,
	AcademicDisciplinaryIndicated: payload01.AcademicDisciplinaryIndicated,
	AcademicDisciplinaryDetails: payload01.AcademicDisciplinaryDetails,
	LegalDisciplinaryIndicated: payload01.LegalDisciplinaryIndicated,
	LegalDisciplinaryDetails: payload01.LegalDisciplinaryDetails,
	ApplicationStudentType: payload01.ApplicationStudentType,
	SourceOfApplication: payload01.SourceOfApplication,
	AgentName: payload01.AgentName,
	AgentUniqueIdentifier: payload01.AgentUniqueIdentifier,
	SponsorName: payload01.SponsorName,
	SponsorCode: payload01.SponsorCode,
	AccommodationFirstPreference: payload01.AccommodationFirstPreference,
	AccommodationSecondPreference: payload01.AccommodationSecondPreference,
	AccommodationThirdPreference: payload01.AccommodationThirdPreference,
	VisaType:payload01.VisaType,
	Addr1-AddressType: payload01.Addr1-AddressType,
	Addr1-Address1: payload01.Addr1-Address1,
	Addr1-Address2: payload01.Addr1-Address2,
	Addr1-Address3: payload01.Addr1-Address3,
	Addr1-AddressCity: payload01.Addr1-AddressCity,
	Addr1-AddressState: payload01.Addr1-AddressState,
	Addr1-AddressZip: payload01.Addr1-AddressZip,
	Addr1-AddressCountry: payload01.Addr1-AddressCountry,
	Addr1-AddrCntryCode: payload01.Addr1-AddrCntryCode,
	Addr2-AddressType: payload01.Addr2-AddressType,
	Addr2-Address1: payload01.Addr2-Address1,
	Addr2-Address2: payload01.Addr2-Address2,
	Addr2-Address3: payload01.Addr2-Address3,
	Addr2-AddressCity: payload01.Addr2-AddressCity,
	Addr2-AddressState: payload01.Addr2-AddressState,
	Addr2-AddressZip: payload01.Addr2-AddressZip,
	Addr2-AddressCountry: payload01.Addr2-AddressCountry,
	Addr2-AddrCntryCode: payload01.Addr2-AddrCntryCode,
	Schl1-SchoolName: payload01.Schl1-SchoolName,
	Schl1-SchoolType: payload01.Schl1-SchoolType,
	Schl1-SchoolCity: payload01.Schl1-SchoolCity,
	Schl1-SchoolCountry: payload01.Schl1-SchoolCountry,
	Schl1-SchoolCntryCode: payload01.Schl1-SchoolCntryCode,
	Schl1-SchoolStartDate: payload01.Schl1-SchoolStartDate,
	Schl1-SchoolEndDate: payload01.Schl1-SchoolEndDate,
	Schl1-GraduationDate: payload01.Schl1-GraduationDate,
	Schl1-AcademicQualificationName: payload01.Schl1-AcademicQualificationName,
	Schl1-OverallGPA: payload01.Schl1-OverallGPA,
	Schl2-SchoolName: payload01.Schl2-SchoolName,
	Schl2-SchoolType: payload01.Schl2-SchoolType,
	Schl2-SchoolCity: payload01.Schl2-SchoolCity,
	Schl2-SchoolCountry: payload01.Schl2-SchoolCountry,
	Schl2-SchoolCntryCode: payload01.Schl2-SchoolCntryCode,
	Schl2-SchoolStartDate: payload01.Schl2-SchoolStartDate,
	Schl2-SchoolEndDate: payload01.Schl2-SchoolEndDate,
	Schl2-GraduationDate: payload01.Schl2-GraduationDate,
	Schl2-AcademicQualificationName: payload01.Schl2-AcademicQualificationName,
	Schl2-OverallGPA: payload01.Schl2-OverallGPA,
	Schl3-SchoolName: payload01.Schl3-SchoolName,
	Schl3-SchoolType: payload01.Schl3-SchoolType,
	Schl3-SchoolCity: payload01.Schl3-SchoolCity,
	Schl3-SchoolCountry: payload01.Schl3-SchoolCountry,
	Schl3-SchoolCntryCode: payload01.Schl3-SchoolCntryCode,
	Schl3-SchoolStartDate: payload01.Schl3-SchoolStartDate,
	Schl3-SchoolEndDate: payload01.Schl3-SchoolEndDate,
	Schl3-GraduationDate: payload01.Schl3-GraduationDate,
	Schl3-AcademicQualificationName: payload01.Schl3-AcademicQualificationName,
	Schl3-OverallGPA: payload01.Schl3-OverallGPA,
	Schl4-SchoolName: payload01.Schl4-SchoolName,
	Schl4-SchoolType: payload01.Schl4-SchoolType,
	Schl4-SchoolCity: payload01.Schl4-SchoolCity,
	Schl4-SchoolCountry: payload01.Schl4-SchoolCountry,
	Schl4-SchoolCntryCode: payload01.Schl4-SchoolCntryCode,
	Schl4-SchoolStartDate: payload01.Schl4-SchoolStartDate,
	Schl4-SchoolEndDate: payload01.Schl4-SchoolEndDate,
	Schl4-GraduationDate: payload01.Schl4-GraduationDate,
	Schl4-AcademicQualificationName: payload01.Schl4-AcademicQualificationName,
	Schl4-OverallGPA: payload01.Schl4-OverallGPA,
	Schl5-SchoolName: payload01.Schl5-SchoolName,
	Schl5-SchoolType: payload01.Schl5-SchoolType,
	Schl5-SchoolCity: payload01.Schl5-SchoolCity,
	Schl5-SchoolCountry: payload01.Schl5-SchoolCountry,
	Schl5-SchoolCntryCode: payload01.Schl5-SchoolCntryCode,
	Schl5-SchoolStartDate: payload01.Schl5-SchoolStartDate,
	Schl5-SchoolEndDate: payload01.Schl5-SchoolEndDate,
	Schl5-GraduationDate: payload01.Schl5-GraduationDate,
	Schl5-AcademicQualificationName: payload01.Schl5-AcademicQualificationName,
	Schl5-OverallGPA: payload01.Schl5-OverallGPA,
	Schl6-SchoolName: payload01.Schl6-SchoolName,
	Schl6-SchoolType: payload01.Schl6-SchoolType,
	Schl6-SchoolCity: payload01.Schl6-SchoolCity,
	Schl6-SchoolCountry: payload01.Schl6-SchoolCountry,
	Schl6-SchoolCntryCode: payload01.Schl6-SchoolCntryCode,
	Schl6-SchoolStartDate: payload01.Schl6-SchoolStartDate,
	Schl6-SchoolEndDate: payload01.Schl6-SchoolEndDate,
	Schl6-GraduationDate: payload01.Schl6-GraduationDate,
	Schl6-AcademicQualificationName: payload01.Schl6-AcademicQualificationName,
	Schl6-OverallGPA: payload01.Schl6-OverallGPA,
	Schl7-SchoolName: payload01.Schl7-SchoolName,
	Schl7-SchoolType: payload01.Schl7-SchoolType,
	Schl7-SchoolCity: payload01.Schl7-SchoolCity,
	Schl7-SchoolCountry: payload01.Schl7-SchoolCountry,
	Schl7-SchoolCntryCode: payload01.Schl7-SchoolCntryCode,
	Schl7-SchoolStartDate: payload01.Schl7-SchoolStartDate,
	Schl7-SchoolEndDate: payload01.Schl7-SchoolEndDate,
	Schl7-GraduationDate: payload01.Schl7-GraduationDate,
	Schl7-AcademicQualificationName: payload01.Schl7-AcademicQualificationName,
	Schl7-OverallGPA: payload01.Schl7-OverallGPA,
	Schl8-SchoolName: payload01.Schl8-SchoolName,
	Schl8-SchoolType: payload01.Schl8-SchoolType,
	Schl8-SchoolCity: payload01.Schl8-SchoolCity,
	Schl8-SchoolCountry: payload01.Schl8-SchoolCountry,
	Schl8-SchoolCntryCode: payload01.Schl8-SchoolCntryCode,
	Schl8-SchoolStartDate: payload01.Schl8-SchoolStartDate,
	Schl8-SchoolEndDate: payload01.Schl8-SchoolEndDate,
	Schl8-GraduationDate: payload01.Schl8-GraduationDate,
	Schl8-AcademicQualificationName: payload01.Schl8-AcademicQualificationName,
	Schl8-OverallGPA: payload01.Schl8-OverallGPA,
	Schl9-SchoolName: payload01.Schl9-SchoolName,
	Schl9-SchoolType: payload01.Schl9-SchoolType,
	Schl9-SchoolCity: payload01.Schl9-SchoolCity,
	Schl9-SchoolCountry: payload01.Schl9-SchoolCountry,
	Schl9-SchoolCntryCode: payload01.Schl9-SchoolCntryCode,
	Schl9-SchoolStartDate: payload01.Schl9-SchoolStartDate,
	Schl9-SchoolEndDate: payload01.Schl9-SchoolEndDate,
	Schl9-GraduationDate: payload01.Schl9-GraduationDate,
	Schl9-AcademicQualificationName: payload01.Schl9-AcademicQualificationName,
	Schl9-OverallGPA: payload01.Schl9-OverallGPA,
	Schl10-SchoolName: payload01.Schl10-SchoolName,
	Schl10-SchoolType: payload01.Schl10-SchoolType,
	Schl10-SchoolCity: payload01.Schl10-SchoolCity,
	Schl10-SchoolCountry: payload01.Schl10-SchoolCountry,
	Schl10-SchoolCntryCode: payload01.Schl10-SchoolCntryCode,
	Schl10-SchoolStartDate: payload01.Schl10-SchoolStartDate,
	Schl10-SchoolEndDate: payload01.Schl10-SchoolEndDate,
	Schl10-GraduationDate: payload01.Schl10-GraduationDate,
	Schl10-AcademicQualificationName: payload01.Schl10-AcademicQualificationName,
	Schl10-OverallGPA: payload01.Schl10-OverallGPA,
	Schl11-SchoolName: payload01.Schl11-SchoolName,
	Schl11-SchoolType: payload01.Schl11-SchoolType,
	Schl11-SchoolCity: payload01.Schl11-SchoolCity,
	Schl11-SchoolCountry: payload01.Schl11-SchoolCountry,
	Schl11-SchoolCntryCode: payload01.Schl11-SchoolCntryCode,
	Schl11-SchoolStartDate: payload01.Schl11-SchoolStartDate,
	Schl11-SchoolEndDate: payload01.Schl11-SchoolEndDate,
	Schl11-GraduationDate: payload01.Schl11-GraduationDate,
	Schl11-AcademicQualificationName: payload01.Schl11-AcademicQualificationName,
	Schl11-OverallGPA: payload01.Schl11-OverallGPA,
	Schl12-SchoolName: payload01.Schl12-SchoolName,
	Schl12-SchoolType: payload01.Schl12-SchoolType,
	Schl12-SchoolCity: payload01.Schl12-SchoolCity,
	Schl12-SchoolCountry: payload01.Schl12-SchoolCountry,
	Schl12-SchoolCntryCode: payload01.Schl12-SchoolCntryCode,
	Schl12-SchoolStartDate: payload01.Schl12-SchoolStartDate,
	Schl12-SchoolEndDate: payload01.Schl12-SchoolEndDate,
	Schl12-GraduationDate: payload01.Schl12-GraduationDate,
	Schl12-AcademicQualificationName: payload01.Schl12-AcademicQualificationName,
	Schl12-OverallGPA: payload01.Schl12-OverallGPA,
	Crse1-CourseId: payload01.Crse1-CourseId,
	Crse1-ProgramName: payload01.Crse1-ProgramName,
	Crse1-ProgramGroup: payload01.Crse1-ProgramGroup,
	Crse1-ProgramType: payload01.Crse1-ProgramType,
	Crse1-UniversityMajorCode: payload01.Crse1-UniversityMajorCode,
	Crse1-CourseStartDate: payload01.Crse1-CourseStartDate,
	Crse1-CourseEndDate: payload01.Crse1-CourseEndDate,
	Crse1-LatestDecision: payload01.Crse1-LatestDecision,
	Crse1-LatestDecisionDateTime: payload01.Crse1-LatestDecisionDateTime,
	Crse1-LatestResponse: payload01.Crse1-LatestResponse,
	Crse1-LatestResponseDateTime: payload01.Crse1-LatestResponseDateTime
})]]></dw:set-payload>
                </dw:transform-message>
                <logger message="${mule.env} : Transform from XML to CSV successful" level="INFO" doc:name="Logger"/>
                <ftps:write config-ref="FTPS__Server" filePath="${output.path}" fileName="${output.pattern}" doc:name="FTPS Write INTOTESTS File"/>
            </processor-chain>
        </scatter-gather>
        <logger message="${mule.env} : INTO SFTP Flow ENDS." level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="wsu-esg-DE-INTO-SFTP-flow" initialState="started" processingStrategy="synchronous">
        <ftps:read config-ref="FTPS__Server" filePath="${de_input.path}" fileName="*.xml" moveToDir="${de_input.path.archive}" pollingInitialDelay="10000" pollingFrequency="420000" sizeCheckWaitTime="1500" zeroSizeCheckWaitTime="10000" zeroSizeCheckMaxRetries="25" doc:name="FTPS Read File"/>
        <logger message="${mule.env} : DE INTO SFTP Flow STARTED.Received File from Server!" level="INFO" doc:name="Logger"/>
        <set-payload value="#[payload]" mimeType="application/xml" doc:name="Set Payload"/>
        <scatter-gather doc:name="Scatter-Gather">
            <processor-chain>
                <logger message="${mule.env} : DE Test Score Gathering" level="INFO" doc:name="Logger"/>
                <dw:transform-message doc:name="Transform Message" metadata:id="8cd8ad54-2a61-4c52-924c-b061813a7ea7">
                    <dw:input-payload doc:sample="/Users/tnelson/Documents/INTO DE App Files/DE_ApplicationFileLoadSample.xml" mimeType="application/xml"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/csv separator="," , ignoreEmptyLine=true
---
(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	UniqueAccountId: studentApplication.UniqueAccountId,
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	VisaType: studentApplication.VisaType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Campus: studentApplication.Campus,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[0].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[0].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[0].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[0].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[0].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[0].WritingSubscore
})) ++
(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	UniqueAccountId: studentApplication.UniqueAccountId,
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	VisaType: studentApplication.VisaType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Campus: studentApplication.Campus,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[1].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[1].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[1].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[1].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[1].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[1].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[1]?) otherwise {} ))
++
(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	UniqueAccountId: studentApplication.UniqueAccountId,
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	VisaType: studentApplication.VisaType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Campus: studentApplication.Campus,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[2].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[2].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[2].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[2].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[2].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[2].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[2]?) otherwise {} ))
++
(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	UniqueAccountId: studentApplication.UniqueAccountId,
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	VisaType: studentApplication.VisaType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Campus: studentApplication.Campus,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[3].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[3].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[3].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[3].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[3].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[3].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[3]?) otherwise {} ))
++
(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	UniqueAccountId: studentApplication.UniqueAccountId,
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	VisaType: studentApplication.VisaType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Campus: studentApplication.Campus,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[4].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[4].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[4].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[4].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[4].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[4].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[4]?) otherwise {} ))
++
(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	UniqueAccountId: studentApplication.UniqueAccountId,
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	VisaType: studentApplication.VisaType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Campus: studentApplication.Campus,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[5].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[5].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[5].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[5].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[5].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[5].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[5]?) otherwise {} ))
++
(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	UniqueAccountId: studentApplication.UniqueAccountId,
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	VisaType: studentApplication.VisaType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Campus: studentApplication.Campus,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[6].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[6].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[6].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[6].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[6].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[6].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[6]?) otherwise {} ))
++
(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	UniqueAccountId: studentApplication.UniqueAccountId,
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	VisaType: studentApplication.VisaType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Campus: studentApplication.Campus,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[7].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[7].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[7].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[7].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[7].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[7].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[7]?) otherwise {} ))
++
(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	UniqueAccountId: studentApplication.UniqueAccountId,
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	VisaType: studentApplication.VisaType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Campus: studentApplication.Campus,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[8].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[8].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[8].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[8].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[8].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[8].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[8]?) otherwise {} ))
++
(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	UniqueAccountId: studentApplication.UniqueAccountId,
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	VisaType: studentApplication.VisaType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Campus: studentApplication.Campus,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[9].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[9].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[9].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[9].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[9].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[9].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[9]?) otherwise {} ))
++
(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	UniqueAccountId: studentApplication.UniqueAccountId,
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	VisaType: studentApplication.VisaType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Campus: studentApplication.Campus,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[10].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[10].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[10].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[10].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[10].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[10].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[10]?) otherwise {} ))
++
(payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	UniqueAccountId: studentApplication.UniqueAccountId,
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	VisaType: studentApplication.VisaType,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	Campus: studentApplication.Campus,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Address3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Address3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	Test1-TestName: studentApplication.StudentTestScores.*TestScoreNode[11].TestName,
	Test1-TestNameOther: studentApplication.StudentTestScores.*TestScoreNode[11].TestNameOther,
	Test1-TestDate: studentApplication.StudentTestScores.*TestScoreNode[11].TestDate,
	Test1-OfficialTestScore: studentApplication.StudentTestScores.*TestScoreNode[11].OfficialTestScore,
	Test1-OverallScore: studentApplication.StudentTestScores.*TestScoreNode[11].OverallScore,
	Test1-ListeningSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ListeningSubscore,
	Test1-ReadingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].ReadingSubscore,
	Test1-SpeakingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].SpeakingSubscore,
	Test1-WritingSubscore: studentApplication.StudentTestScores.*TestScoreNode[11].WritingSubscore
} when (studentApplication.StudentTestScores.*TestScoreNode[11]?) otherwise {} ))]]></dw:set-payload>
                </dw:transform-message>
                <logger message="${mule.env} :DE Test Transformed &quot;#[message.payloadAs(java.lang.String)]&quot;" level="INFO" doc:name="Logger"/>
                <dw:transform-message doc:name="Transform Message" metadata:id="d3e2a254-6f83-46bd-badb-16e71f037437">
                    <dw:input-payload doc:sample="/Users/tnelson/Documents/INTO DE App Files/Direct Entry sample CSV.csv"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/csv separator="," , ignoreEmptyLine=true
---
payload map ((payload01 , indexOfPayload01) -> {
	UniqueAccountId: payload01.UniqueAccountId,
	SalesforceApplicationID: payload01.SalesforceApplicationID,
	INTOCenterName: payload01.INTOCenterName,
	ApplicationCreationDateTime: payload01.ApplicationCreationDateTime,
	FirstName: payload01.FirstName,
	LastName: payload01.LastName,
	MiddleName: payload01.MiddleName,
	Gender: payload01.Gender,
	DateOfBirth: payload01.DateOfBirth,
	CountryOfBirth: payload01.CountryOfBirth,
	CountryOfCitizenship: payload01.CountryOfCitizenship,
	CountryOfNationality: payload01.CountryOfNationality,
	CurrentlyLivingInUS: payload01.CurrentlyLivingInUS,
	CitizenshipType: payload01.CitizenshipType,
	VisaType: payload01.VisaType,
	StudentEmailAddress: payload01.StudentEmailAddress,
	PhoneNumber: payload01.PhoneNumber,
	Campus: payload01.Campus,
	Addr1-AddressType: payload01.Addr1-AddressType,
	Addr1-Address1: payload01.Addr1-Address1,
	Addr1-Address2: payload01.Addr1-Address2,
	Addr1-Address3: payload01.Addr1-Address3,
	Addr1-AddressCity: payload01.Addr1-AddressCity,
	Addr1-AddressState: payload01.Addr1-AddressState,
	Addr1-AddressZip: payload01.Addr1-AddressZip,
	Addr1-AddressCountry: payload01.Addr1-AddressCountry,
	Addr2-AddressType: payload01.Addr2-AddressType,
	Addr2-Address1: payload01.Addr2-Address1,
	Addr2-Address2: payload01.Addr2-Address2,
	Addr2-Address3: payload01.Addr2-Address3,
	Addr2-AddressCity: payload01.Addr2-AddressCity,
	Addr2-AddressState: payload01.Addr2-AddressState,
	Addr2-AddressZip: payload01.Addr2-AddressZip,
	Addr2-AddressCountry: payload01.Addr2-AddressCountry,
	Test1-TestName: payload01.Test1-TestName,
	Test1-TestNameOther: payload01.Test1-TestNameOther,
	Test1-TestDate: payload01.Test1-TestDate,
	Test1-OfficialTestScore: payload01.Test1-OfficialTestScore,
	Test1-OverallScore: payload01.Test1-OverallScore,
	Test1-ListeningSubscore: payload01.Test1-ListeningSubscore,
	Test1-ReadingSubscore: payload01.Test1-ReadingSubscore,
	Test1-SpeakingSubscore: payload01.Test1-SpeakingSubscore,
	Test1-WritingSubscore: payload01.Test1-WritingSubscore
} when payload01.Test1-TestName matches /(.*\w+.*)/ otherwise {})]]></dw:set-payload>
                </dw:transform-message>
                <logger message="${mule.env} : DE Only Tests with test scores" level="INFO" doc:name="Logger"/>
                <dw:transform-message doc:name="Transform Message" metadata:id="d53b8dcf-07c7-438b-8581-c74697fe4adf">
                    <dw:input-payload doc:sample="/Users/tnelson/Documents/INTO DE App Files/Direct Entry sample CSV.csv"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/csv separator="," , ignoreEmptyLine=true, quoteValues=true, header=false
---
payload
]]></dw:set-payload>
                </dw:transform-message>
                <logger message="${mule.env} : DE Test Score Processed" level="INFO" doc:name="Logger"/>
                <ftps:write config-ref="FTPS__Server" filePath="${de_output_test.path}" fileName="${de_output_test.pattern}" doc:name="FTPS Write INTOAPP File"/>
            </processor-chain>
            <processor-chain>
                <logger message="${mule.env} : DE Course File Processing" level="INFO" doc:name="Logger"/>
                <dw:transform-message doc:name="Transform Message" metadata:id="df1233e2-fe84-401e-9b49-6c27e804ff64">
                    <dw:input-payload doc:sample="sample_data\AppRoot_1.xml" mimeType="application/xml"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/csv separator = "," , ignoreEmptyLine = true
---
payload.AppRoot.*StudentApplication map ((studentApplication , indexOfStudentApplication) -> {
	UniqueAccountId: studentApplication.UniqueAccountId,
	SalesforceApplicationID: studentApplication.SalesforceApplicationID,
	INTOCenterName: studentApplication.INTOCenterName,
	ApplicationCreationDateTime: studentApplication.ApplicationCreationDateTime,
	FirstName: studentApplication.FirstName,
	LastName: studentApplication.LastName,
	MiddleName: studentApplication.MiddleName,
	Gender: studentApplication.Gender,
	DateOfBirth: studentApplication.DateOfBirth,
	CountryOfBirth: studentApplication.CountryOfBirth,
	CountryOfCitizenship: studentApplication.CountryOfCitizenship,
	CountryOfNationality: studentApplication.CountryOfNationality,
	CurrentlyLivingInUS: studentApplication.CurrentlyLivingInUS,
	CitizenshipType: studentApplication.CitizenshipType,
	VisaType: studentApplication.VisaType,
	PassportNumber: studentApplication.PassportNumber,
	PassportIssueDate: studentApplication.PassportIssueDate,
	PassportExpirationDate: studentApplication.PassportExpirationDate,
	PassportIssueCountry: studentApplication.PassportIssueCountry,
	PassportPlaceOfBirth: studentApplication.PassportPlaceOfBirth,
	StudentEmailAddress: studentApplication.StudentEmailAddress,
	PhoneNumber: studentApplication.PhoneNumber,
	OptInForText: studentApplication.OptInForText,
	AcademicDisciplinaryIndicated: studentApplication.AcademicDisciplinaryIndicated,
	AcademicDisciplinaryDetails: studentApplication.AcademicDisciplinaryDetails,
	LegalDisciplinaryIndicated: studentApplication.LegalDisciplinaryIndicated,
	LegalDisciplinaryDetails: studentApplication.LegalDisciplinaryDetails,
	SourceOfApplication: studentApplication.SourceOfApplication,
	AgentName: studentApplication.AgentName,
	"Agent Email": studentApplication.AgentEmailAddress,
	AgentUniqueIdentifier: studentApplication.AgentUniqueIdentifier,
	SponsorName: studentApplication.SponsorName,
	SponsorCode: studentApplication.SponsorCode,
	AccommodationFirstPreference: studentApplication.AccommodationFirstPreference,
	AccommodationSecondPreference: studentApplication.AccommodationSecondPreference,
	AccommodationThirdPreference: studentApplication.AccommodationThirdPreference,
	PreviousSurname: studentApplication.PreviousSurname,
	ApplicationStudentType: studentApplication.ApplicationStudentType,
	CollegeCreditsCompleted: studentApplication.CollegeCreditsCompleted,
	ProfessionalProgram: studentApplication.ProfessionalProgram,
	ProfessionalProgramType: studentApplication.ProfessionalProgramType,
	SiblingsAttending: studentApplication.SiblingsAttending,
	SiblingNames: studentApplication.SiblingNames,
	Campus: studentApplication.Campus,
	Addr1-AddressType: studentApplication.AddressInformation.*AddressNode[0].AddressType,
	Addr1-Address1: studentApplication.AddressInformation.*AddressNode[0].Address1,
	Addr1-Address2: studentApplication.AddressInformation.*AddressNode[0].Address2,
	Addr1-Addrress3: studentApplication.AddressInformation.*AddressNode[0].Address3,
	Addr1-AddressCity: studentApplication.AddressInformation.*AddressNode[0].AddressCity,
	Addr1-AddressState: studentApplication.AddressInformation.*AddressNode[0].AddressState,
	Addr1-AddressZip: studentApplication.AddressInformation.*AddressNode[0].AddressZip,
	Addr1-AddressCountry: studentApplication.AddressInformation.*AddressNode[0].AddressCountry,
	Addr2-AddressType: studentApplication.AddressInformation.*AddressNode[1].AddressType,
	Addr2-Address1: studentApplication.AddressInformation.*AddressNode[1].Address1,
	Addr2-Address2: studentApplication.AddressInformation.*AddressNode[1].Address2,
	Addr2-Addrress3: studentApplication.AddressInformation.*AddressNode[1].Address3,
	Addr2-AddressCity: studentApplication.AddressInformation.*AddressNode[1].AddressCity,
	Addr2-AddressState: studentApplication.AddressInformation.*AddressNode[1].AddressState,
	Addr2-AddressZip: studentApplication.AddressInformation.*AddressNode[1].AddressZip,
	Addr2-AddressCountry: studentApplication.AddressInformation.*AddressNode[1].AddressCountry,
	CourseId: studentApplication.CourseInformation.CourseNode.CourseId,
	CourseIntegrationType: studentApplication.CourseInformation.CourseNode.CourseIntegrationType,
	ProgramName: studentApplication.CourseInformation.CourseNode.ProgramName,
	ProgramGroup: studentApplication.CourseInformation.CourseNode.ProgramGroup,
	ProgramType: studentApplication.CourseInformation.CourseNode.ProgramType,
	"UniversityMajorCode (DEPRECIATED)": studentApplication.CourseInformation.CourseNode.UniversityMajorCode,
	CourseStartDate: studentApplication.CourseInformation.CourseNode.CourseStartDate,
	CourseEndDate: studentApplication.CourseInformation.CourseNode.CourseEndDate,
	LatestDecision: studentApplication.CourseInformation.CourseNode.LatestDecision,
	LatestDecisionDateTime: studentApplication.CourseInformation.CourseNode.LatestDecisionDateTime,
	LatestResponse: studentApplication.CourseInformation.CourseNode.LatestResponse,
	LatestResponseDateTime: studentApplication.CourseInformation.CourseNode.LatestResponseDateTime,
	Schl1-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolName,
	Schl1-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolType,
	Schl1-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCity,
	Schl1-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolCountry,
	Schl1-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolStartDate,
	Schl1-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].SchoolEndDate,
	Schl1-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[0].GraduationDate,
	Schl1-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[0].AcademicQualificationName,
	Schl1-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[0].OverallGPA,
	Schl2-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolName,
	Schl2-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolType,
	Schl2-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCity,
	Schl2-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolCountry,
	Schl2-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolStartDate,
	Schl2-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].SchoolEndDate,
	Schl2-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[1].GraduationDate,
	Schl2-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[1].AcademicQualificationName,
	Schl2-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[1].OverallGPA,
	Schl3-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolName,
	Schl3-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolType,
	Schl3-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCity,
	Schl3-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolCountry,
	Schl3-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolStartDate,
	Schl3-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].SchoolEndDate,
	Schl3-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[2].GraduationDate,
	Schl3-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[2].AcademicQualificationName,
	Schl3-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[2].OverallGPA,
	Schl4-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolName,
	Schl4-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolType,
	Schl4-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCity,
	Schl4-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolCountry,
	Schl4-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolStartDate,
	Schl4-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].SchoolEndDate,
	Schl4-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[3].GraduationDate,
	Schl4-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[3].AcademicQualificationName,
	Schl4-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[3].OverallGPA,
	Schl5-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolName,
	Schl5-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolType,
	Schl5-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCity,
	Schl5-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolCountry,
	Schl5-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolStartDate,
	Schl5-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].SchoolEndDate,
	Schl5-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[4].GraduationDate,
	Schl5-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[4].AcademicQualificationName,
	Schl5-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[4].OverallGPA,
	Schl6-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolName,
	Schl6-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolType,
	Schl6-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCity,
	Schl6-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolCountry,
	Schl6-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolStartDate,
	Schl6-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].SchoolEndDate,
	Schl6-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[5].GraduationDate,
	Schl6-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[5].AcademicQualificationName,
	Schl6-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[5].OverallGPA,
	Schl7-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolName,
	Schl7-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolType,
	Schl7-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCity,
	Schl7-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolCountry,
	Schl7-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolStartDate,
	Schl7-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].SchoolEndDate,
	Schl7-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[6].GraduationDate,
	Schl7-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[6].AcademicQualificationName,
	Schl7-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[6].OverallGPA,
	Schl8-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolName,
	Schl8-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolType,
	Schl8-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCity,
	Schl8-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolCountry,
	Schl8-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolStartDate,
	Schl8-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].SchoolEndDate,
	Schl8-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[7].GraduationDate,
	Schl8-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[7].AcademicQualificationName,
	Schl8-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[7].OverallGPA,
	Schl9-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolName,
	Schl9-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolType,
	Schl9-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCity,
	Schl9-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolCountry,
	Schl9-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolStartDate,
	Schl9-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].SchoolEndDate,
	Schl9-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[8].GraduationDate,
	Schl9-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[8].AcademicQualificationName,
	Schl9-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[8].OverallGPA,
	Schl10-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolName,
	Schl10-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolType,
	Schl10-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCity,
	Schl10-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolCountry,
	Schl10-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolStartDate,
	Schl10-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].SchoolEndDate,
	Schl10-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[9].GraduationDate,
	Schl10-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[9].AcademicQualificationName,
	Schl10-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[9].OverallGPA,
	Schl2-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolName,
	Schl11-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolType,
	Schl11-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCity,
	Schl11-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolCountry,
	Schl11-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolStartDate,
	Schl11-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].SchoolEndDate,
	Schl11-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[10].GraduationDate,
	Schl11-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[10].AcademicQualificationName,
	Schl11-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[10].OverallGPA,
	Schl12-SchoolName: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolName,
	Schl12-SchoolType: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolType,
	Schl12-SchoolCity: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCity,
	Schl12-SchoolCountry: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolCountry,
	Schl12-SchoolStartDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolStartDate,
	Schl12-SchoolEndDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].SchoolEndDate,
	Schl12-GraduationDate: studentApplication.StudentEducationHistory.*PriorEducationNode[11].GraduationDate,
	Schl12-AcademicQualificationName: studentApplication.StudentEducationHistory.*PriorEducationNode[11].AcademicQualificationName,
	Schl12-OverallGPA: studentApplication.StudentEducationHistory.*PriorEducationNode[11].OverallGPA
})
]]></dw:set-payload>
                </dw:transform-message>
                <logger message="${mule.env} : DE Course Transformed" level="INFO" doc:name="Logger"/>
                <dw:transform-message doc:name="Transform Message" metadata:id="8aa51fb5-1e9c-484b-a84a-ff1ad8b017a1">
                    <dw:input-payload doc:sample="/Users/tnelson/Documents/INTO DE App Files/Direct Entry sample CSV.csv"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/csv separator = "," , ignoreEmptyLine = true , header = false, quoteValues=true
---
payload map ((payload01 , indexOfPayload01) -> {
	UniqueAccountId: payload01.UniqueAccountId,
	SalesforceApplicationID: payload01.SalesforceApplicationID,
	INTOCenterName: payload01.INTOCenterName,
	ApplicationCreationDateTime: payload01.ApplicationCreationDateTime,
	FirstName: payload01.FirstName,
	LastName: payload01.LastName,
	MiddleName: payload01.MiddleName,
	Gender: payload01.Gender,
	DateOfBirth: payload01.DateOfBirth,
	CountryOfBirth: payload01.CountryOfBirth,
	CountryOfCitizenship: payload01.CountryOfCitizenship,
	CountryOfNationality: payload01.CountryOfNationality,
	CurrentlyLivingInUS: payload01.CurrentlyLivingInUS,
	CitizenshipType: payload01.CitizenshipType,
	VisaType: payload01.VisaType,
	PassportNumber: payload01.PassportNumber,
	PassportIssueDate: payload01.PassportIssueDate,
	PassportExpirationDate: payload01.PassportExpirationDate,
	PassportIssueCountry: payload01.PassportIssueCountry,
	PassportPlaceOfBirth: payload01.PassportPlaceOfBirth,
	StudentEmailAddress: payload01.StudentEmailAddress,
	PhoneNumber: payload01.PhoneNumber,
	OptInForText: payload01.OptInForText,
	AcademicDisciplinaryIndicated: payload01.AcademicDisciplinaryIndicated,
	AcademicDisciplinaryDetails: payload01.AcademicDisciplinaryDetails,
	LegalDisciplinaryIndicated: payload01.LegalDisciplinaryIndicated,
	LegalDisciplinaryDetails: payload01.LegalDisciplinaryDetails,
	SourceOfApplication: payload01.SourceOfApplication,
	AgentName: payload01.AgentName,
	"Agent Email": payload01."Agent Email",
	AgentUniqueIdentifier: payload01.AgentUniqueIdentifier,
	SponsorName: payload01.SponsorName,
	SponsorCode: payload01.SponsorCode,
	AccommodationFirstPreference: payload01.AccommodationFirstPreference,
	AccommodationSecondPreference: payload01.AccommodationSecondPreference,
	AccommodationThirdPreference: payload01.AccommodationThirdPreference,
	PreviousSurname: payload01.PreviousSurname,
	ApplicationStudentType: payload01.ApplicationStudentType,
	CollegeCreditsCompleted: payload01.CollegeCreditsCompleted,
	ProfessionalProgram: payload01.ProfessionalProgram,
	ProfessionalProgramType: payload01.ProfessionalProgramType,
	SiblingsAttending: payload01.SiblingsAttending,
	SiblingNames: payload01.SiblingNames,
	Campus: payload01.Campus,
	Addr1-AddressType: payload01.Addr1-AddressType,
	Addr1-Address1: payload01.Addr1-Address1,
	Addr1-Address2: payload01.Addr1-Address2,
	Addr1-Address3: payload01.Addr1-Address3,
	Addr1-AddressCity: payload01.Addr1-AddressCity,
	Addr1-AddressState: payload01.Addr1-AddressState,
	Addr1-AddressZip: payload01.Addr1-AddressZip,
	Addr1-AddressCountry: payload01.Addr1-AddressCountry,
	Addr2-AddressType: payload01.Addr2-AddressType,
	Addr2-Address1: payload01.Addr2-Address1,
	Addr2-Address2: payload01.Addr2-Address2,
	Addr2-Address3: payload01.Addr2-Address3,
	Addr2-AddressCity: payload01.Addr2-AddressCity,
	Addr2-AddressState: payload01.Addr2-AddressState,
	Addr2-AddressZip: payload01.Addr2-AddressZip,
	Addr2-AddressCountry: payload01.Addr2-AddressCountry,
	CourseId: payload01.CourseId,
	CourseIntegrationType: payload01.CourseIntegrationType,
	ProgramName: payload01.ProgramName,
	ProgramGroup: payload01.ProgramGroup,
	ProgramType: payload01.ProgramType,
	"UniversityMajorCode (DEPRECIATED)": payload01."UniversityMajorCode (DEPRECIATED)",
	CourseStartDate: payload01.CourseStartDate,
	CourseEndDate: payload01.CourseEndDate,
	LatestDecision: payload01.LatestDecision,
	LatestDecisionDateTime: payload01.LatestDecisionDateTime,
	LatestResponse: payload01.LatestResponse,
	LatestResponseDateTime: payload01.LatestResponseDateTime,
	Schl1-SchoolName: payload01.Schl1-SchoolName,
	Schl1-SchoolType: payload01.Schl1-SchoolType,
	Schl1-SchoolCity: payload01.Schl1-SchoolCity,
	Schl1-SchoolCountry: payload01.Schl1-SchoolCountry,
	Schl1-SchoolStartDate: payload01.Schl1-SchoolStartDate,
	Schl1-SchoolEndDate: payload01.Schl1-SchoolEndDate,
	Schl1-GraduationDate: payload01.Schl1-GraduationDate,
	Schl1-AcademicQualificationName: payload01.Schl1-AcademicQualificationName,
	Schl1-OverallGPA: payload01.Schl1-OverallGPA,
	Schl2-SchoolName: payload01.Schl2-SchoolName,
	Schl2-SchoolType: payload01.Schl2-SchoolType,
	Schl2-SchoolCity: payload01.Schl2-SchoolCity,
	Schl2-SchoolCountry: payload01.Schl2-SchoolCountry,
	Schl2-SchoolStartDate: payload01.Schl2-SchoolStartDate,
	Schl2-SchoolEndDate: payload01.Schl2-SchoolEndDate,
	Schl2-GraduationDate: payload01.Schl2-GraduationDate,
	Schl2-AcademicQualificationName: payload01.Schl2-AcademicQualificationName,
	Schl2-OverallGPA: payload01.Schl2-OverallGPA,
	Schl3-SchoolName: payload01.Schl3-SchoolName,
	Schl3-SchoolType: payload01.Schl3-SchoolType,
	Schl3-SchoolCity: payload01.Schl3-SchoolCity,
	Schl3-SchoolCountry: payload01.Schl3-SchoolCountry,
	Schl3-SchoolStartDate: payload01.Schl3-SchoolStartDate,
	Schl3-SchoolEndDate: payload01.Schl3-SchoolEndDate,
	Schl3-GraduationDate: payload01.Schl3-GraduationDate,
	Schl3-AcademicQualificationName: payload01.Schl3-AcademicQualificationName,
	Schl3-OverallGPA: payload01.Schl3-OverallGPA,
	Schl4-SchoolName: payload01.Schl4-SchoolName,
	Schl4-SchoolType: payload01.Schl4-SchoolType,
	Schl4-SchoolCity: payload01.Schl4-SchoolCity,
	Schl4-SchoolCountry: payload01.Schl4-SchoolCountry,
	Schl4-SchoolStartDate: payload01.Schl4-SchoolStartDate,
	Schl4-SchoolEndDate: payload01.Schl4-SchoolEndDate,
	Schl4-GraduationDate: payload01.Schl4-GraduationDate,
	Schl4-AcademicQualificationName: payload01.Schl4-AcademicQualificationName,
	Schl4-OverallGPA: payload01.Schl4-OverallGPA,
	Schl5-SchoolName: payload01.Schl5-SchoolName,
	Schl5-SchoolType: payload01.Schl5-SchoolType,
	Schl5-SchoolCity: payload01.Schl5-SchoolCity,
	Schl5-SchoolCountry: payload01.Schl5-SchoolCountry,
	Schl5-SchoolStartDate: payload01.Schl5-SchoolStartDate,
	Schl5-SchoolEndDate: payload01.Schl5-SchoolEndDate,
	Schl5-GraduationDate: payload01.Schl5-GraduationDate,
	Schl5-AcademicQualificationName: payload01.Schl5-AcademicQualificationName,
	Schl5-OverallGPA: payload01.Schl5-OverallGPA,
	Schl6-SchoolName: payload01.Schl6-SchoolName,
	Schl6-SchoolType: payload01.Schl6-SchoolType,
	Schl6-SchoolCity: payload01.Schl6-SchoolCity,
	Schl6-SchoolCountry: payload01.Schl6-SchoolCountry,
	Schl6-SchoolStartDate: payload01.Schl6-SchoolStartDate,
	Schl6-SchoolEndDate: payload01.Schl6-SchoolEndDate,
	Schl6-GraduationDate: payload01.Schl6-GraduationDate,
	Schl6-AcademicQualificationName: payload01.Schl6-AcademicQualificationName,
	Schl6-OverallGPA: payload01.Schl6-OverallGPA,
	Schl7-SchoolName: payload01.Schl7-SchoolName,
	Schl7-SchoolType: payload01.Schl7-SchoolType,
	Schl7-SchoolCity: payload01.Schl7-SchoolCity,
	Schl7-SchoolCountry: payload01.Schl7-SchoolCountry,
	Schl7-SchoolStartDate: payload01.Schl7-SchoolStartDate,
	Schl7-SchoolEndDate: payload01.Schl7-SchoolEndDate,
	Schl7-GraduationDate: payload01.Schl7-GraduationDate,
	Schl7-AcademicQualificationName: payload01.Schl7-AcademicQualificationName,
	Schl7-OverallGPA: payload01.Schl7-OverallGPA,
	Schl8-SchoolName: payload01.Schl8-SchoolName,
	Schl8-SchoolType: payload01.Schl8-SchoolType,
	Schl8-SchoolCity: payload01.Schl8-SchoolCity,
	Schl8-SchoolCountry: payload01.Schl8-SchoolCountry,
	Schl8-SchoolStartDate: payload01.Schl8-SchoolStartDate,
	Schl8-SchoolEndDate: payload01.Schl8-SchoolEndDate,
	Schl8-GraduationDate: payload01.Schl8-GraduationDate,
	Schl8-AcademicQualificationName: payload01.Schl8-AcademicQualificationName,
	Schl8-OverallGPA: payload01.Schl8-OverallGPA,
	Schl9-SchoolName: payload01.Schl9-SchoolName,
	Schl9-SchoolType: payload01.Schl9-SchoolType,
	Schl9-SchoolCity: payload01.Schl9-SchoolCity,
	Schl9-SchoolCountry: payload01.Schl9-SchoolCountry,
	Schl9-SchoolCntryCode: payload01.Schl9-SchoolCntryCode,
	Schl9-SchoolStartDate: payload01.Schl9-SchoolStartDate,
	Schl9-SchoolEndDate: payload01.Schl9-SchoolEndDate,
	Schl9-GraduationDate: payload01.Schl9-GraduationDate,
	Schl9-AcademicQualificationName: payload01.Schl9-AcademicQualificationName,
	Schl9-OverallGPA: payload01.Schl9-OverallGPA,
	Schl10-SchoolName: payload01.Schl10-SchoolName,
	Schl10-SchoolType: payload01.Schl10-SchoolType,
	Schl10-SchoolCity: payload01.Schl10-SchoolCity,
	Schl10-SchoolCountry: payload01.Schl10-SchoolCountry,
	Schl10-SchoolStartDate: payload01.Schl10-SchoolStartDate,
	Schl10-SchoolEndDate: payload01.Schl10-SchoolEndDate,
	Schl10-GraduationDate: payload01.Schl10-GraduationDate,
	Schl10-AcademicQualificationName: payload01.Schl10-AcademicQualificationName,
	Schl10-OverallGPA: payload01.Schl10-OverallGPA,
	Schl11-SchoolName: payload01.Schl11-SchoolName,
	Schl11-SchoolType: payload01.Schl11-SchoolType,
	Schl11-SchoolCity: payload01.Schl11-SchoolCity,
	Schl11-SchoolCountry: payload01.Schl11-SchoolCountry,
	Schl11-SchoolStartDate: payload01.Schl11-SchoolStartDate,
	Schl11-SchoolEndDate: payload01.Schl11-SchoolEndDate,
	Schl11-GraduationDate: payload01.Schl11-GraduationDate,
	Schl11-AcademicQualificationName: payload01.Schl11-AcademicQualificationName,
	Schl11-OverallGPA: payload01.Schl11-OverallGPA,
	Schl12-SchoolName: payload01.Schl12-SchoolName,
	Schl12-SchoolType: payload01.Schl12-SchoolType,
	Schl12-SchoolCity: payload01.Schl12-SchoolCity,
	Schl12-SchoolCountry: payload01.Schl12-SchoolCountry,
	Schl12-SchoolStartDate: payload01.Schl12-SchoolStartDate,
	Schl12-SchoolEndDate: payload01.Schl12-SchoolEndDate,
	Schl12-GraduationDate: payload01.Schl12-GraduationDate,
	Schl12-AcademicQualificationName: payload01.Schl12-AcademicQualificationName,
	Schl12-OverallGPA: payload01.Schl12-OverallGPA
})
]]></dw:set-payload>
                </dw:transform-message>
                <logger message="${mule.env} : DE Transform from XML to CSV successful" level="INFO" doc:name="Logger"/>
                <ftps:write config-ref="FTPS__Server" filePath="${de_output.path}" fileName="${de_output.pattern}" doc:name="FTPS Write INTOTESTS File"/>
            </processor-chain>
        </scatter-gather>
        <logger message="${mule.env} : DE INTO SFTP Flow ENDS." level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="wsu-esg-INTO-RECEIPT-flow" processingStrategy="synchronous">
        <ftps:read config-ref="FTPS__Server" filePath="${input_receipt.path}" fileName="*.csv" moveToDir="${input_receipt.path.archive}" pollingFrequency="90000" doc:name="FTPS Read Receipt File" sizeCheckWaitTime="1500"/>
        <logger message="${mule.env} : INTO RECEIPT Flow STARTED.Received Receipt CSV File" level="INFO" doc:name="Logger"/>
        <set-payload value="#[payload]" mimeType="application/csv" doc:name="Set Payload"/>
        <dw:transform-message doc:name="Transform Message" metadata:id="63818452-82e7-4354-942c-d17daf36b176">
            <dw:input-payload doc:sample="sample_data/list_csv_6.csv"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
{
	AppReceiptFile: {
		(payload map ((payload01 , indexOfPayload01) -> {
			StudentDetails: {
				INTOAppId: payload01.INTOAppId,
				BannerPidm: payload01.BannerPidm,
				UniversityStudentNumber: payload01.UniversityStudentNumber,
				UniversityEmail: payload01.UniversityEmail
			}
		}))
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <logger message="${mule.env} : Receipt File Transformed from CSV to XML" level="INFO" doc:name="Logger"/>
        <ftps:write config-ref="FTPS__Server" filePath="${output_receipt.path}" fileName="${output_receipt.pattern}" doc:name="FTPS Receipt Write"/>
        <logger message="${mule.env} : INTO RECEIPT Flow ENDS." level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="wsu-esg-DE-INTO-RECEIPT-flow" processingStrategy="synchronous">
        <ftps:read config-ref="FTPS__Server" filePath="${de_input_receipt.path}" fileName="*.csv" moveToDir="${de_input_receipt.path.archive}" pollingFrequency="360000" sizeCheckWaitTime="1500" doc:name="FTPS Read DE Receipt File"/>
        <logger message="${mule.env} : DE INTO RECEIPT Flow STARTED.Received Receipt CSV File" level="INFO" doc:name="Logger"/>
        <set-payload value="#[payload]" mimeType="application/csv" doc:name="Set Payload"/>
        <dw:transform-message doc:name="Transform Message" metadata:id="3817007b-0ba0-4317-b584-d4310ff28a63">
            <dw:input-payload mimeType="application/csv" doc:sample="sample_data/list_csv_7.csv"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding = "UTF-8"
%namespace xsi http://www.w3.org/2001/XMLSchema-instance

---
{
	xsi#AppReceiptFile : {
		(payload map ((payload01 , indexOfPayload01) -> {
			StudentDetails: {
				INTOAccountId: payload01.INTOAccountId,
				INTOCourseId: payload01.INTOCourseId,
				UniversityMajorCode: payload01.UniversityMajorCode,
				BannerPidm: payload01.BannerPidm when (payload01.BannerPidm != "") otherwise null,
				UniversityStudentNumber: payload01.UniversityStudentNumber,
				UniversityEmail: payload01.UniversityEmail,
				Major: payload01.Major,
				Term: payload01.Term,
				DegreeType: payload01.DegreeType when (payload01.DegreeType != "") otherwise null,
				Campus: payload01.Campus,
				DecisionType: {
					Decision: payload01.Decision when (payload01.Decision != "") otherwise null,
					OtherNotes: payload01.OtherNotes when (payload01.OtherNotes != "") otherwise null
				},
				Response: payload01.Response when (payload01.Response != "") otherwise null,
				EnrollmentStatus: payload01.EnrollmentStatus
			}
		} 
		 ))
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <object-to-string-transformer doc:name="Object to String"/>
        <set-payload value="#[org.mule.util.StringUtils.replace(payload,'xsi:AppReceiptFile','AppReceiptFile')]" doc:name="Set Payload"/>
        <logger message="${mule.env} : DE Receipt File Transformed from CSV to XML" level="INFO" doc:name="Logger"/>
        <ftps:write config-ref="FTPS__Server" filePath="${de_output_receipt.path}" fileName="${output_receipt.pattern}" doc:name="FTPS Receipt Write"/>
        <logger message="${mule.env} : DE INTO RECEIPT Flow ENDS." level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="wsu-esg-test-orcid-auth-flow">
        <http:listener config-ref="HTTP_Listener_Configuration_Orcid" path="/orcid" doc:name="HTTP"/>
        <logger message="#[message.inboundProperties.'http.query.params'.code]" level="INFO" doc:name="Logger params"/>
        <invoke name="InvokeOrcid" object-ref="CallOrcid" method="getOrcidId" methodArguments="#[message.inboundProperties.'http.query.params'.code]" doc:name="Invoke"/>
    </flow>
    <flow name="eab-risk-apiFlow" initialState="started">
        <poll doc:name="Poll">
            <schedulers:cron-scheduler expression="0 10 20 * * ?"/>
<http:request config-ref="HTTP_Request_Configuration_EAB" path="students" method="GET" doc:name="HTTPS">
                <http:request-builder>
                    <http:header headerName="Authorization" value="Basic anVzdGluLmh1Z2hlc0B3c3UuZWR1OjFsNG1lVmxKaCE="/>
                </http:request-builder>
            </http:request>
        </poll>
        <logger message="Start flow" level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Transform Message">
        <dw:input-payload mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output text/csv
---
payload.data map ((datum , indexOfDatum) -> {
	studentID: datum.studentId,
	studentGraduationProbability: datum.studentGraduationProbability as :string {format: "#.####"},
	studentRiskCategory: datum.studentRiskCategory,
	numberOfNotifications: datum.numberOfNotifications
})]]></dw:set-payload>
        </dw:transform-message>
        <logger message="Transformed" level="INFO" doc:name="Logger"/>
        <ftps:write config-ref="FTPS__Server" filePath="${output_EAB.path}" fileName="${output_EAB.filename}" doc:name="FTPS"/>
        <logger message="End Flow." level="INFO" doc:name="Logger"/>
        
    </flow>
    <flow name="wsu-esg-AcadWorksFlow">
        <ftps:read config-ref="FTPS__Server" filePath="${input_AWDF.path}" fileName="*.csv" moveToDir="completed" moveToFilename="completed-#[function:dateStamp].csv" pollingFrequency="86400000" doc:name="FTPS (Streaming)"/>
        <logger message="AW File Received" level="INFO" doc:name="Logger"/>
        <set-payload value="#[payload]" doc:name="Set Payload"/>
        <scripting:component doc:name="Groovy">
            <scripting:script engine="Groovy"><![CDATA[message.addOutboundAttachment('file',payload,'form-data');]]></scripting:script>
        </scripting:component>
        <http:request config-ref="AW_HTTP_Connection" path="/api/v0/imports" method="POST" doc:name="HTTP">
            <http:request-builder>
                <http:query-param paramName="token" value="84bd708153c192fcd8840fd7ecc497f440a1a56151c4748cf153c2ebe51cc731"/>
            </http:request-builder>
        </http:request>
    </flow>
    <flow name="wsu-esg-JoshFlow">
        <ftps:read config-ref="TEST_DASH_FTPS__Basic_Configuration" filePath="${waiver_input.path}" fileName="*.xlsx" moveToDir="${waiver_archive.path}" moveToFilename="Processed-#[function:dateStamp].xlsx" doc:name="FTPS (Streaming)"/>
        <logger message="Waiver file recieved." level="INFO" doc:name="Logger"/>
        <dw:transform-message doc:name="Transform Message" metadata:id="c0aee815-fe84-4ca2-9105-50cf8f61b4f9">
            <dw:input-payload mimeType="application/xlsx"/>
            <dw:input-session-variable  variableName="FileProductionDate"/>
            <dw:input-session-variable  variableName="FileProd"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
{
	DirectEntryWaiver: {
		FileProductionDate: payload.sheet1.FileProductionDate[0],
		CenterCode: payload.sheet1.CenterCode[0],
		BatchID: payload.sheet1.BatchID[0],
		BatchAction: payload.sheet1.BatchAction[0],
		(payload.sheet1 map ((sheet1 , indexOfSheet1) -> {
			StudentDetail: {
				UniversityStudentID: sheet1.UniversityStudentID,
				DirectEntryWaiverID: sheet1.DirectEntryWaiverID,
				FirstName: sheet1.FirstName,
				MiddleName: sheet1.MiddleName,
				LastName: sheet1.LastName,
				Citizenship: sheet1.Citizenship,
				Gender: sheet1.Gender,
				DateOfBirth: sheet1.DateOfBirth,
				ApplicationEmail: sheet1.ApplicationEmail
			}
		}))
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <logger message="After Transformation" level="INFO" doc:name="Logger"/>
        <ftps:write config-ref="TEST_DASH_FTPS__Basic_Configuration" filePath="${waiver_output.path}" fileName="Output-Test-#[function:dateStamp].xml" doc:name="FTPS"/>
        <logger message="After FTPS" level="INFO" doc:name="Logger"/>
    </flow>
    
</mule>
